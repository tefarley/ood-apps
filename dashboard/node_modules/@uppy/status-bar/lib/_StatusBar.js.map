{"version":3,"sources":["_StatusBar.jsx"],"names":["getSpeed","getBytesRemaining","getTextDirection","statusBarStates","StatusBarUI","packageJson","locale","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","getUploadingState","error","isAllComplete","recoveredState","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","Object","keys","i","length","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","StatusBar","UIPlugin","constructor","uppy","opts","startUpload","getState","emit","undefined","upload","catch","id","title","type","defaultLocale","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","capabilities","allowNewUpload","totalProgress","newFiles","startedFiles","completeFiles","inProgressNotPausedFiles","isUploadStarted","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","values","totalETA","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","uploadState","complete","numUploads","i18n","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION","version"],"mappings":"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","sourcesContent":["// TODO: rename this file to StatusBar.jsx on the next major.\n\nimport { UIPlugin } from '@uppy/core'\nimport getSpeed from '@uppy/utils/lib/getSpeed'\nimport getBytesRemaining from '@uppy/utils/lib/getBytesRemaining'\nimport getTextDirection from '@uppy/utils/lib/getTextDirection'\nimport statusBarStates from './StatusBarStates.js'\nimport StatusBarUI from './StatusBar.jsx'\n\nimport packageJson from '../package.json'\nimport locale from './locale.js'\n\nfunction getTotalSpeed (files) {\n  let totalSpeed = 0\n  files.forEach((file) => {\n    totalSpeed += getSpeed(file.progress)\n  })\n  return totalSpeed\n}\n\nfunction getTotalETA (files) {\n  const totalSpeed = getTotalSpeed(files)\n  if (totalSpeed === 0) {\n    return 0\n  }\n\n  const totalBytesRemaining = files.reduce((total, file) => {\n    return total + getBytesRemaining(file.progress)\n  }, 0)\n\n  return Math.round((totalBytesRemaining / totalSpeed) * 10) / 10\n}\n\nfunction getUploadingState (error, isAllComplete, recoveredState, files) {\n  if (error && !isAllComplete) {\n    return statusBarStates.STATE_ERROR\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING\n  }\n\n  let state = statusBarStates.STATE_WAITING\n  const fileIDs = Object.keys(files)\n  for (let i = 0; i < fileIDs.length; i++) {\n    const { progress } = files[fileIDs[i]]\n    // If ANY files are being uploaded right now, show the uploading state.\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING\n    }\n    // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING\n    }\n    // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n    if (\n      progress.postprocess\n      && state !== statusBarStates.STATE_UPLOADING\n      && state !== statusBarStates.STATE_PREPROCESSING\n    ) {\n      state = statusBarStates.STATE_POSTPROCESSING\n    }\n  }\n  return state\n}\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nexport default class StatusBar extends UIPlugin {\n  static VERSION = packageJson.version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    this.defaultLocale = locale\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.i18nInit()\n\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  startUpload = () => {\n    const { recoveredState } = this.uppy.getState()\n\n    if (recoveredState) {\n      this.uppy.emit('restore-confirmed')\n      return undefined\n    }\n\n    return this.uppy.upload().catch(() => {\n      // Error logged in Core\n    })\n  }\n\n  render (state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState,\n    } = state\n\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost,\n    } = this.uppy.getObjectOfFilesPerState()\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    const newFilesOrRecovered = recoveredState\n      ? Object.values(files)\n      : newFiles\n    const totalETA = getTotalETA(inProgressNotPausedFiles)\n    const resumableUploads = !!capabilities.resumableUploads\n    const supportsUploadProgress = capabilities.uploadProgress !== false\n\n    let totalSize = 0\n    let totalUploadedSize = 0\n\n    startedFiles.forEach((file) => {\n      totalSize += file.progress.bytesTotal || 0\n      totalUploadedSize += file.progress.bytesUploaded || 0\n    })\n\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(\n        error,\n        isAllComplete,\n        recoveredState,\n        state.files || {},\n      ),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl,\n    })\n  }\n\n  onMount () {\n    // Set the text direction if the page has not defined one.\n    const element = this.el\n    const direction = getTextDirection(element)\n    if (!direction) {\n      element.dir = 'ltr'\n    }\n  }\n\n  install () {\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}