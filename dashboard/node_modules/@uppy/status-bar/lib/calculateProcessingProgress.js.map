{"version":3,"sources":["calculateProcessingProgress.js"],"names":["calculateProcessingProgress","files","values","mode","message","progress","Object","preprocess","postprocess","push","value","reduce","total","progressValue","length"],"mappings":";;AAAe,SAASA,2BAAT,CAAsCC,KAAtC,EAA6C;AAC1D,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,IAAJ;AACA,MAAIC,OAAJ;;AAEA,OAAK,MAAM;AAAEC,IAAAA;AAAF,GAAX,IAA2BC,MAAM,CAACJ,MAAP,CAAcD,KAAd,CAA3B,EAAiD;AAC/C,UAAM;AAAEM,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA8BH,QAApC,CAD+C,CAE/C;AACA;;AACA,QAAID,OAAO,IAAI,IAAX,KAAoBG,UAAU,IAAIC,WAAlC,CAAJ,EAAoD;AAClD,OAAC;AAAEL,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoBG,UAAU,IAAIC,WAAnC;AACD;;AACD,QAAI,CAAAD,UAAU,QAAV,YAAAA,UAAU,CAAEJ,IAAZ,MAAqB,aAAzB,EAAwCD,MAAM,CAACO,IAAP,CAAYF,UAAU,CAACG,KAAvB;AACxC,QAAI,CAAAF,WAAW,QAAX,YAAAA,WAAW,CAAEL,IAAb,MAAsB,aAA1B,EAAyCD,MAAM,CAACO,IAAP,CAAYD,WAAW,CAACE,KAAxB;AAC1C;;AAED,QAAMA,KAAK,GAAGR,MAAM,CAACS,MAAP,CAAc,CAACC,KAAD,EAAQC,aAAR,KAA0B;AACpD,WAAOD,KAAK,GAAGC,aAAa,GAAGX,MAAM,CAACY,MAAtC;AACD,GAFa,EAEX,CAFW,CAAd;AAIA,SAAO;AACLX,IAAAA,IADK;AAELC,IAAAA,OAFK;AAGLM,IAAAA;AAHK,GAAP;AAKD;;iBAzBuBV,2B","sourcesContent":["export default function calculateProcessingProgress (files) {\n  const values = []\n  let mode\n  let message\n\n  for (const { progress } of Object.values(files)) {\n    const { preprocess, postprocess } = progress\n    // In the future we should probably do this differently. For now we'll take the\n    // mode and message from the first fileâ€¦\n    if (message == null && (preprocess || postprocess)) {\n      ({ mode, message } = preprocess || postprocess)\n    }\n    if (preprocess?.mode === 'determinate') values.push(preprocess.value)\n    if (postprocess?.mode === 'determinate') values.push(postprocess.value)\n  }\n\n  const value = values.reduce((total, progressValue) => {\n    return total + progressValue / values.length\n  }, 0)\n\n  return {\n    mode,\n    message,\n    value,\n  }\n}\n"]}