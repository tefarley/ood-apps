{
  "version": 3,
  "sources": ["../../javascript/packs/editor.js"],
  "sourcesContent": ["'use strict';\n\nconst KEY_PREFIX = \"ood_editor_store_\";\n\nfunction normalizeKey(key) {\n  return `${KEY_PREFIX}${key}`;\n}\n\n// Set localStorage. Adds a key prefix to reduce overlap likelihood.\nfunction setLocalStorage(key, value) {\n  localStorage.setItem(normalizeKey(key), value);\n  return null;\n}\n\n// Get localStorage. Adds a key prefix added by setter.\nfunction getLocalStorage(key) {\n  return localStorage.getItem(normalizeKey(key));\n}\n\n// Set a user preference key to a specific value.\nfunction setUserPreference(key, value) {\n  return setLocalStorage(normalizeKey(key), value);\n}\n\n// Get the current value of the key from preferences.\nfunction getUserPreference(key) {\n  return getLocalStorage(normalizeKey(key));\n}\n\njQuery(function () {\n\n  $('[data-toggle=\"tooltip\"]').tooltip();\n\n  const editorElement = document.querySelector('#editor');\n  const apiUrl = editorElement.dataset.api;\n  const filePath = editorElement.dataset.path;\n\n  // Do not load the ace editor if the element is not available\n  // ex. for directory views\n  if ($('#editor').length) {\n    $('#error').hide();\n    // Initialize the ace editor\n    const editor = ace.edit(\"editor\");\n    const loading = false;\n\n    setOptions();\n    initializeEditor();\n    setBeforeUnloadState();\n    editor.setReadOnly(false);\n\n    function initializeEditor() {\n\n      // Disables/enables the save button and binds the window popup if there are changes\n      editor.on(\"change\", function () {\n        // The dirtyCounter is an undocumented array in the UndoManager\n        // Changing the editor only modifies the dirtyCounter after the event is over,\n        // so we set it manually on change to apply the proper unload state\n        // https://github.com/ajaxorg/ace/blob/4a55188fdb0eee9e2d3854f175e67408a1e47655/lib/ace/undomanager.js#L164\n        editor.session.getUndoManager().dirtyCounter++;\n        setBeforeUnloadState();\n      });\n\n      // Mark the editor as clean after load.\n      editor.session.getUndoManager().markClean();\n\n      // Disable the save button after the initial load\n      // Modifying settings and adding data to the editor makes the UndoManager \"dirty\"\n      // so we have to explicitly re-disable it on page ready.\n      $(\"#save-button\").prop(\"disabled\", true);\n\n      // Set the caret at inside the editor on load.\n      editor.focus();\n    };\n\n    function setSaveButtonState() {\n      $(\"#save-button\").prop(\"disabled\", editor.session.getUndoManager().isClean());\n    };\n\n    function setBeforeUnloadState() {\n      if (loading) {\n        editor.session.getUndoManager().markClean();\n      };\n\n      setSaveButtonState();\n\n      window.onbeforeunload = function (e) {\n        if (!editor.session.getUndoManager().isClean()) {\n          return 'You have unsaved changes!';\n        } else {\n          // return nothing\n        };\n      };\n    };\n\n    // Toggles a spinner in place of the save icon\n    function toggleSaveSpinner() {\n      $(\"#save-icon\").toggleClass(\"glyphicon-save\");\n      $(\"#save-icon\").toggleClass(\"glyphicon-refresh\");\n      $(\"#save-icon\").toggleClass(\"glyphicon-spin\");\n    };\n\n    // Toggles a checkbox in place of the save icon\n    function toggleSaveConfirmed() {\n      $(\"#save-icon\").toggleClass(\"glyphicon-save\");\n      $(\"#save-icon\").toggleClass(\"glyphicon-saved\");\n    };\n\n    // Sets the key binding to the selected option\n    function setKeyBinding() {\n      var binding = $(\"#keybindings option:selected\").val();\n      if (binding == \"default\") {\n        binding = null;\n      }\n      editor.setKeyboardHandler(binding);\n    };\n\n    // Change the font size\n    $(\"#fontsize\").on('change', function () {\n      editor.setFontSize($(\"#fontsize option:selected\").val());\n      setUserPreference('fontsize', $(\"#fontsize option:selected\").val());\n    });\n\n    // Change the key bindings\n    $(\"#keybindings\").on('change', function () {\n      setKeyBinding();\n      setUserPreference('keybindings', $(\"#keybindings option:selected\").val());\n    });\n\n    // Change the theme\n    $(\"#theme\").on('change', function () {\n      editor.setTheme($(\"#theme option:selected\").val());\n      setUserPreference('theme', $(\"#theme option:selected\").val());\n    });\n\n    // Change the mode\n    $(\"#mode\").on('change', function () {\n      editor.getSession().setMode(\"ace/mode/\" + $(\"#mode option:selected\").val());\n      setUserPreference('mode', $(\"#mode option:selected\").val());\n    });\n\n    // Change the word wrap setting\n    $(\"#wordwrap\").on('change', function () {\n      editor.getSession().setUseWrapMode(this.checked);\n      setUserPreference('wordwrap', $(\"#wordwrap\").is(':checked'));\n    });\n\n    // Save button onclick handler\n    // sends the content to the cloudcmd api via PUT request\n    $(\"#save-button\").on('click', function () {\n      if (apiUrl !== \"\") {\n        $(\"#save-button\").prop(\"disabled\", true);\n        toggleSaveSpinner();\n        $.ajax({\n          url: apiUrl,\n          type: 'PUT',\n          data: editor.getValue(),\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-CSRF-Token': $('meta[name=\"csrf-token\"]').attr('content')\n          },\n          success: function (data) {\n            toggleSaveSpinner();\n            toggleSaveConfirmed();\n            setTimeout(function () {\n              toggleSaveConfirmed();\n            }, 2000);\n\n            editor.session.getUndoManager().markClean();\n            $(\"#save-button\").prop(\"disabled\", editor.session.getUndoManager().isClean());\n            setBeforeUnloadState();\n          },\n          error: function (request, status, error) {\n            alert(\"An error occured attempting to save this file!\\n\" + error);\n            toggleSaveSpinner();\n          }\n        });\n      } else {\n        console.log(\"Can't save this!\");\n      };\n    });\n\n    // Automatically Sets the dropdown and mode to the modelist option\n    function setModeFromModelist() {\n      var modelist = ace.require(\"ace/ext/modelist\").getModeForPath(filePath);\n      $(\"#mode\").val(modelist.name);\n      editor.session.setMode(modelist.mode);\n    };\n\n\n    function setOptions() {\n      $(\"#keybindings\").val(getUserPreference('keybindings') || \"default\");\n      setKeyBinding();\n      $(\"#fontsize\").val(getUserPreference('fontsize') || '12px');\n      editor.setFontSize($(\"#fontsize option:selected\").val());\n      $(\"#mode\").val(getUserPreference('mode') || \"text\");\n      editor.session.setMode(\"ace/mode/\" + $(\"#mode option:selected\").val());\n      $(\"#theme\").val(getUserPreference('theme') || \"ace/theme/solarized_light\");\n      editor.setTheme($(\"#theme option:selected\").val());\n      $(\"#wordwrap\").prop(\"checked\", getUserPreference('wordwrap') === \"true\");\n      editor.getSession().setUseWrapMode($(\"#wordwrap\").is(':checked'));\n    };\n\n    initializeEditor();\n  }\n});\n"],
  "mappings": "AAEA,IAAMA,EAAa,oBAEnB,SAASC,EAAaC,EAAK,CACzB,MAAO,GAAGF,IAAaE,GACzB,CAGA,SAASC,EAAgBD,EAAKE,EAAO,CACnC,oBAAa,QAAQH,EAAaC,CAAG,EAAGE,CAAK,EACtC,IACT,CAGA,SAASC,EAAgBH,EAAK,CAC5B,OAAO,aAAa,QAAQD,EAAaC,CAAG,CAAC,CAC/C,CAGA,SAASI,EAAkBJ,EAAKE,EAAO,CACrC,OAAOD,EAAgBF,EAAaC,CAAG,EAAGE,CAAK,CACjD,CAGA,SAASG,EAAkBL,EAAK,CAC9B,OAAOG,EAAgBJ,EAAaC,CAAG,CAAC,CAC1C,CAEA,OAAO,UAAY,CAEjB,EAAE,yBAAyB,EAAE,QAAQ,EAErC,IAAMM,EAAgB,SAAS,cAAc,SAAS,EAChDC,EAASD,EAAc,QAAQ,IAC/BE,EAAWF,EAAc,QAAQ,KAIvC,GAAI,EAAE,SAAS,EAAE,OAAQ,CAWvB,IAASG,EAAT,UAA4B,CAG1BC,EAAO,GAAG,SAAU,UAAY,CAK9BA,EAAO,QAAQ,eAAe,EAAE,eAChCC,EAAqB,CACvB,CAAC,EAGDD,EAAO,QAAQ,eAAe,EAAE,UAAU,EAK1C,EAAE,cAAc,EAAE,KAAK,WAAY,EAAI,EAGvCA,EAAO,MAAM,CACf,EAESE,EAAT,UAA8B,CAC5B,EAAE,cAAc,EAAE,KAAK,WAAYF,EAAO,QAAQ,eAAe,EAAE,QAAQ,CAAC,CAC9E,EAESC,EAAT,UAAgC,CAC1BE,GACFH,EAAO,QAAQ,eAAe,EAAE,UAAU,EAG5CE,EAAmB,EAEnB,OAAO,eAAiB,SAAUE,EAAG,CACnC,GAAI,CAACJ,EAAO,QAAQ,eAAe,EAAE,QAAQ,EAC3C,MAAO,2BAIX,CACF,EAGSK,EAAT,UAA6B,CAC3B,EAAE,YAAY,EAAE,YAAY,gBAAgB,EAC5C,EAAE,YAAY,EAAE,YAAY,mBAAmB,EAC/C,EAAE,YAAY,EAAE,YAAY,gBAAgB,CAC9C,EAGSC,EAAT,UAA+B,CAC7B,EAAE,YAAY,EAAE,YAAY,gBAAgB,EAC5C,EAAE,YAAY,EAAE,YAAY,iBAAiB,CAC/C,EAGSC,EAAT,UAAyB,CACvB,IAAIC,EAAU,EAAE,8BAA8B,EAAE,IAAI,EAChDA,GAAW,YACbA,EAAU,MAEZR,EAAO,mBAAmBQ,CAAO,CACnC,EAoESC,EAAT,UAA+B,CAC7B,IAAIC,EAAW,IAAI,QAAQ,kBAAkB,EAAE,eAAeZ,CAAQ,EACtE,EAAE,OAAO,EAAE,IAAIY,EAAS,IAAI,EAC5BV,EAAO,QAAQ,QAAQU,EAAS,IAAI,CACtC,EAGSC,EAAT,UAAsB,CACpB,EAAE,cAAc,EAAE,IAAIhB,EAAkB,aAAa,GAAK,SAAS,EACnEY,EAAc,EACd,EAAE,WAAW,EAAE,IAAIZ,EAAkB,UAAU,GAAK,MAAM,EAC1DK,EAAO,YAAY,EAAE,2BAA2B,EAAE,IAAI,CAAC,EACvD,EAAE,OAAO,EAAE,IAAIL,EAAkB,MAAM,GAAK,MAAM,EAClDK,EAAO,QAAQ,QAAQ,YAAc,EAAE,uBAAuB,EAAE,IAAI,CAAC,EACrE,EAAE,QAAQ,EAAE,IAAIL,EAAkB,OAAO,GAAK,2BAA2B,EACzEK,EAAO,SAAS,EAAE,wBAAwB,EAAE,IAAI,CAAC,EACjD,EAAE,WAAW,EAAE,KAAK,UAAWL,EAAkB,UAAU,IAAM,MAAM,EACvEK,EAAO,WAAW,EAAE,eAAe,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC,CAClE,EAhKA,EAAE,QAAQ,EAAE,KAAK,EAEjB,IAAMA,EAAS,IAAI,KAAK,QAAQ,EAC1BG,EAAU,GAEhBQ,EAAW,EACXZ,EAAiB,EACjBE,EAAqB,EACrBD,EAAO,YAAY,EAAK,EAqExB,EAAE,WAAW,EAAE,GAAG,SAAU,UAAY,CACtCA,EAAO,YAAY,EAAE,2BAA2B,EAAE,IAAI,CAAC,EACvDN,EAAkB,WAAY,EAAE,2BAA2B,EAAE,IAAI,CAAC,CACpE,CAAC,EAGD,EAAE,cAAc,EAAE,GAAG,SAAU,UAAY,CACzCa,EAAc,EACdb,EAAkB,cAAe,EAAE,8BAA8B,EAAE,IAAI,CAAC,CAC1E,CAAC,EAGD,EAAE,QAAQ,EAAE,GAAG,SAAU,UAAY,CACnCM,EAAO,SAAS,EAAE,wBAAwB,EAAE,IAAI,CAAC,EACjDN,EAAkB,QAAS,EAAE,wBAAwB,EAAE,IAAI,CAAC,CAC9D,CAAC,EAGD,EAAE,OAAO,EAAE,GAAG,SAAU,UAAY,CAClCM,EAAO,WAAW,EAAE,QAAQ,YAAc,EAAE,uBAAuB,EAAE,IAAI,CAAC,EAC1EN,EAAkB,OAAQ,EAAE,uBAAuB,EAAE,IAAI,CAAC,CAC5D,CAAC,EAGD,EAAE,WAAW,EAAE,GAAG,SAAU,UAAY,CACtCM,EAAO,WAAW,EAAE,eAAe,KAAK,OAAO,EAC/CN,EAAkB,WAAY,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC,CAC7D,CAAC,EAID,EAAE,cAAc,EAAE,GAAG,QAAS,UAAY,CACpCG,IAAW,IACb,EAAE,cAAc,EAAE,KAAK,WAAY,EAAI,EACvCQ,EAAkB,EAClB,EAAE,KAAK,CACL,IAAKR,EACL,KAAM,MACN,KAAMG,EAAO,SAAS,EACtB,QAAS,CACP,eAAgB,aAChB,eAAgB,EAAE,yBAAyB,EAAE,KAAK,SAAS,CAC7D,EACA,QAAS,SAAUY,EAAM,CACvBP,EAAkB,EAClBC,EAAoB,EACpB,WAAW,UAAY,CACrBA,EAAoB,CACtB,EAAG,GAAI,EAEPN,EAAO,QAAQ,eAAe,EAAE,UAAU,EAC1C,EAAE,cAAc,EAAE,KAAK,WAAYA,EAAO,QAAQ,eAAe,EAAE,QAAQ,CAAC,EAC5EC,EAAqB,CACvB,EACA,MAAO,SAAUY,EAASC,EAAQC,EAAO,CACvC,MAAM;AAAA,EAAqDA,CAAK,EAChEV,EAAkB,CACpB,CACF,CAAC,GAED,QAAQ,IAAI,kBAAkB,CAElC,CAAC,EAuBDN,EAAiB,CACnB,CACF,CAAC",
  "names": ["KEY_PREFIX", "normalizeKey", "key", "setLocalStorage", "value", "getLocalStorage", "setUserPreference", "getUserPreference", "editorElement", "apiUrl", "filePath", "initializeEditor", "editor", "setBeforeUnloadState", "setSaveButtonState", "loading", "e", "toggleSaveSpinner", "toggleSaveConfirmed", "setKeyBinding", "binding", "setModeFromModelist", "modelist", "setOptions", "data", "request", "status", "error"]
}
