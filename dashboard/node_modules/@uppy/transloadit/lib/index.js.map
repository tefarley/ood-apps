{"version":3,"sources":["index.js"],"names":["hasProperty","ErrorWithCause","BasePlugin","Tus","Assembly","Client","AssemblyOptions","validateParams","AssemblyWatcher","locale","packageJson","defaultGetAssemblyOptions","file","options","params","signature","fields","sendErrorToConsole","originalErr","err","error","cause","console","COMPANION","ALLOWED_COMPANION_PATTERN","TL_COMPANION","Transloadit","constructor","uppy","opts","rawFile","getFile","id","transloadit","assembly","assemblies","getPluginState","client","addFile","catch","log","emit","reason","uploadsAssemblies","assemblyIDs","Object","values","flat","map","assemblyID","getAssembly","Promise","all","setData","pluginData","savedState","previousAssemblies","keys","length","restoreState","files","results","status","entries","uploads","forEach","uploadedFile","state","stepName","result","original_id","localId","push","setPluginState","restoreAssemblies","uploadID","allAssemblyIDs","updateAssemblies","activeAssemblies","update","restored","resolve","then","fileIDs","filesWithoutErrors","filter","mode","message","i18n","createAssembly","importFromUploadURLs","fileID","assemblyOptions","build","maybeCreatedAssemblies","createdAssemblies","Boolean","assembly_id","filteredFileIDs","closeSocketConnections","close","addResultData","incompleteFiles","completedFiles","watcher","assemblyWatchers","promise","submitError","startsWith","endpoint","originalRequest","getUnderlyingObject","responseURL","type","title","defaultLocale","defaultOptions","service","errorReporting","waitForEncoding","waitForMetadata","alwaysRunAssembly","getAssemblyOptions","limit","retryDelays","RateLimitedQueue","i18nInit","hasCustomAssemblyOptions","rateLimitedQueue","create","install","addPreProcessor","addPostProcessor","on","use","storeFingerprintForResuming","useFastRemoteRetry","metaFields","capabilities","getState","setState","individualCancellation","uninstall","removePreProcessor","removePostProcessor","off","getAssemblyFiles","getFiles","list","VERSION","addPluginVersion","pluginName","versionName","plugin","getPlugin","join","meta","assembly_url","filename","name","fieldname","tus","tus_url","addRequestId","remote","test","companionUrl","newHost","companion_url","replace","path","url","newFile","assign","expectedFiles","newAssembly","includes","cancelAssembly","updateNumberOfFilesInAssembly","updatedFiles","fileRemovedHandler","fileRemoved","nbOfRemainingFiles","wrapped","details","reserveFile","i","uploadURL","tus_upload_url","uploadUrl","is_tus_file","size","undefined","assemblyId","entry","assembly_ssl_url","getAssemblyStatus","finalStatus","newStatus","ok","connect","version","COMPANION_PATTERN"],"mappings":"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","sourcesContent":["import hasProperty from '@uppy/utils/lib/hasProperty'\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport BasePlugin from '@uppy/core/lib/BasePlugin'\nimport Tus from '@uppy/tus'\nimport Assembly from './Assembly.js'\nimport Client from './Client.js'\nimport AssemblyOptions, { validateParams } from './AssemblyOptions.js'\nimport AssemblyWatcher from './AssemblyWatcher.js'\n\nimport locale from './locale.js'\nimport packageJson from '../package.json'\n\nfunction defaultGetAssemblyOptions (file, options) {\n  return {\n    params: options.params,\n    signature: options.signature,\n    fields: options.fields,\n  }\n}\n\nconst sendErrorToConsole = originalErr => err => {\n  const error = new ErrorWithCause('Failed to send error to the client', { cause: err })\n  // eslint-disable-next-line no-console\n  console.error(error, originalErr)\n}\n\nconst COMPANION = 'https://api2.transloadit.com/companion'\n// Regex matching acceptable postMessage() origins for authentication feedback from companion.\nconst ALLOWED_COMPANION_PATTERN = /\\.transloadit\\.com$/\n// Regex used to check if a Companion address is run by Transloadit.\nconst TL_COMPANION = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/companion/\n\n/**\n * Upload files to Transloadit using Tus.\n */\nexport default class Transloadit extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #rateLimitedQueue\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Transloadit'\n    this.title = 'Transloadit'\n\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      service: 'https://api2.transloadit.com',\n      errorReporting: true,\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false,\n      importFromUploadURLs: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions: defaultGetAssemblyOptions,\n      limit: 20,\n      retryDelays: [7_000, 10_000, 15_000, 20_000],\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n    this.#rateLimitedQueue = new RateLimitedQueue(this.opts.limit)\n\n    this.i18nInit()\n\n    const hasCustomAssemblyOptions = this.opts.getAssemblyOptions !== defaultOptions.getAssemblyOptions\n    if (this.opts.params) {\n      validateParams(this.opts.params)\n    } else if (!hasCustomAssemblyOptions) {\n      // Throw the same error that we'd throw if the `params` returned from a\n      // `getAssemblyOptions()` function is null.\n      validateParams(null)\n    }\n\n    this.client = new Client({\n      service: this.opts.service,\n      client: this.#getClientVersion(),\n      errorReporting: this.opts.errorReporting,\n      rateLimitedQueue: this.#rateLimitedQueue,\n    })\n    // Contains Assembly instances for in-progress Assemblies.\n    this.activeAssemblies = {}\n    // Contains a mapping of uploadID to AssemblyWatcher\n    this.assemblyWatchers = {}\n    // Contains a file IDs that have completed postprocessing before the upload\n    // they belong to has entered the postprocess stage.\n    this.completedFiles = Object.create(null)\n  }\n\n  #getClientVersion () {\n    const list = [\n      `uppy-core:${this.uppy.constructor.VERSION}`,\n      `uppy-transloadit:${this.constructor.VERSION}`,\n      `uppy-tus:${Tus.VERSION}`,\n    ]\n\n    const addPluginVersion = (pluginName, versionName) => {\n      const plugin = this.uppy.getPlugin(pluginName)\n      if (plugin) {\n        list.push(`${versionName}:${plugin.constructor.VERSION}`)\n      }\n    }\n\n    if (this.opts.importFromUploadURLs) {\n      addPluginVersion('XHRUpload', 'uppy-xhr-upload')\n      addPluginVersion('AwsS3', 'uppy-aws-s3')\n      addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart')\n    }\n\n    addPluginVersion('Dropbox', 'uppy-dropbox')\n    addPluginVersion('Box', 'uppy-box')\n    addPluginVersion('Facebook', 'uppy-facebook')\n    addPluginVersion('GoogleDrive', 'uppy-google-drive')\n    addPluginVersion('Instagram', 'uppy-instagram')\n    addPluginVersion('OneDrive', 'uppy-onedrive')\n    addPluginVersion('Zoom', 'uppy-zoom')\n    addPluginVersion('Url', 'uppy-url')\n\n    return list.join(',')\n  }\n\n  /**\n   * Attach metadata to files to configure the Tus plugin to upload to Transloadit.\n   * Also use Transloadit's Companion\n   *\n   * See: https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n   *\n   * @param {object} file\n   * @param {object} status\n   */\n  #attachAssemblyMetadata (file, status) {\n    // Add the metadata parameters Transloadit needs.\n    const meta = {\n      ...file.meta,\n      assembly_url: status.assembly_url,\n      filename: file.name,\n      fieldname: 'file',\n    }\n    // Add Assembly-specific Tus endpoint.\n    const tus = {\n      ...file.tus,\n      endpoint: status.tus_url,\n      // Include X-Request-ID headers for better debugging.\n      addRequestId: true,\n    }\n\n    // Set Companion location. We only add this, if 'file' has the attribute\n    // remote, because this is the criteria to identify remote files.\n    // We only replace the hostname for Transloadit's companions, so that\n    // people can also self-host them while still using Transloadit for encoding.\n    let { remote } = file\n\n    if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {\n      const newHost = status.companion_url\n        .replace(/\\/$/, '')\n      const path = file.remote.url\n        .replace(file.remote.companionUrl, '')\n        .replace(/^\\//, '')\n\n      remote = {\n        ...file.remote,\n        companionUrl: newHost,\n        url: `${newHost}/${path}`,\n      }\n    }\n\n    // Store the Assembly ID this file is in on the file under the `transloadit` key.\n    const newFile = {\n      ...file,\n      transloadit: {\n        assembly: status.assembly_id,\n      },\n    }\n    // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n    if (!this.opts.importFromUploadURLs) {\n      Object.assign(newFile, { meta, tus, remote })\n    }\n    return newFile\n  }\n\n  #createAssembly (fileIDs, uploadID, options) {\n    this.uppy.log('[Transloadit] Create Assembly')\n\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature,\n    }).then(async (newAssembly) => {\n      const files = this.uppy.getFiles().filter(({ id }) => fileIDs.includes(id))\n      if (files.length !== fileIDs.length) {\n        if (files.length === 0) {\n          // All files have been removed, cancelling.\n          await this.client.cancelAssembly(newAssembly)\n          return null\n        }\n        // At least one file has been removed.\n        await this.client.updateNumberOfFilesInAssembly(newAssembly, files.length)\n      }\n\n      const assembly = new Assembly(newAssembly, this.#rateLimitedQueue)\n      const { status } = assembly\n      const assemblyID = status.assembly_id\n\n      const { assemblies, uploadsAssemblies } = this.getPluginState()\n      this.setPluginState({\n        // Store the Assembly status.\n        assemblies: {\n          ...assemblies,\n          [assemblyID]: status,\n        },\n        // Store the list of Assemblies related to this upload.\n        uploadsAssemblies: {\n          ...uploadsAssemblies,\n          [uploadID]: [\n            ...uploadsAssemblies[uploadID],\n            assemblyID,\n          ],\n        },\n      })\n\n      const updatedFiles = {}\n      files.forEach((file) => {\n        updatedFiles[file.id] = this.#attachAssemblyMetadata(file, status)\n      })\n\n      this.uppy.setState({\n        files: {\n          ...this.uppy.getState().files,\n          ...updatedFiles,\n        },\n      })\n\n      const fileRemovedHandler = (fileRemoved, reason) => {\n        if (reason === 'cancel-all') {\n          assembly.close()\n          this.uppy.off(fileRemovedHandler)\n        } else if (fileRemoved.id in updatedFiles) {\n          delete updatedFiles[fileRemoved.id]\n          const nbOfRemainingFiles = Object.keys(updatedFiles).length\n          if (nbOfRemainingFiles === 0) {\n            assembly.close()\n            this.#cancelAssembly(newAssembly).catch(() => { /* ignore potential errors */ })\n            this.uppy.off(fileRemovedHandler)\n          } else {\n            this.client.updateNumberOfFilesInAssembly(newAssembly, nbOfRemainingFiles)\n              .catch(() => { /* ignore potential errors */ })\n          }\n        }\n      }\n      this.uppy.on('file-removed', fileRemovedHandler)\n\n      this.uppy.emit('transloadit:assembly-created', status, fileIDs)\n\n      this.uppy.log(`[Transloadit] Created Assembly ${assemblyID}`)\n      return assembly\n    }).catch((err) => {\n      const wrapped = new ErrorWithCause(`${this.i18n('creatingAssemblyFailed')}: ${err.message}`, { cause: err })\n      if ('details' in err) {\n        wrapped.details = err.details\n      }\n      if ('assembly' in err) {\n        wrapped.assembly = err.assembly\n      }\n      throw wrapped\n    })\n  }\n\n  #createAssemblyWatcher (assemblyID, uploadID) {\n  // AssemblyWatcher tracks completion states of all Assemblies in this upload.\n    const watcher = new AssemblyWatcher(this.uppy, assemblyID)\n\n    watcher.on('assembly-complete', (id) => {\n      const files = this.getAssemblyFiles(id)\n      files.forEach((file) => {\n        this.completedFiles[file.id] = true\n        this.uppy.emit('postprocess-complete', file)\n      })\n    })\n\n    watcher.on('assembly-error', (id, error) => {\n      // Clear postprocessing state for all our files.\n      const files = this.getAssemblyFiles(id)\n      files.forEach((file) => {\n      // TODO Maybe make a postprocess-error event here?\n        this.uppy.emit('upload-error', file, error)\n\n        this.uppy.emit('postprocess-complete', file)\n      })\n    })\n\n    this.assemblyWatchers[uploadID] = watcher\n  }\n\n  #shouldWaitAfterUpload () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the Assembly.\n   */\n  #reserveFiles (assembly, fileIDs) {\n    return Promise.all(fileIDs.map((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      return this.client.reserveFile(assembly.status, file)\n    }))\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the Assembly\n   * once they have been fully uploaded.\n   */\n  #onFileUploadURLAvailable = (rawFile) => {\n    const file = this.uppy.getFile(rawFile.id)\n    if (!file?.transloadit?.assembly) {\n      return\n    }\n\n    const { assemblies } = this.getPluginState()\n    const assembly = assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.uppy.log(err)\n      this.uppy.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  #findFile (uploadedFile) {\n    const files = this.uppy.getFiles()\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n      // Completed file upload.\n      if (file.uploadURL === uploadedFile.tus_upload_url) {\n        return file\n      }\n      // In-progress file upload.\n      if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return file\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (file.name === uploadedFile.name && file.size === uploadedFile.size) {\n          return file\n        }\n      }\n    }\n    return undefined\n  }\n\n  #onFileUploadComplete (assemblyId, uploadedFile) {\n    const state = this.getPluginState()\n    const file = this.#findFile(uploadedFile)\n    if (!file) {\n      this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process')\n      return\n    }\n    this.setPluginState({\n      files: {\n        ...state.files,\n        [uploadedFile.id]: {\n          assembly: assemblyId,\n          id: file.id,\n          uploadedFile,\n        },\n      },\n    })\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  /**\n   * Callback when a new Assembly result comes in.\n   *\n   * @param {string} assemblyId\n   * @param {string} stepName\n   * @param {object} result\n   */\n  #onResult (assemblyId, stepName, result) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null // eslint-disable-line no-param-reassign\n\n    const entry = {\n      result,\n      stepName,\n      id: result.id,\n      assembly: assemblyId,\n    }\n\n    this.setPluginState({\n      results: [...state.results, entry],\n    })\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  /**\n   * When an Assembly has finished processing, get the final state\n   * and emit it.\n   *\n   * @param {object} status\n   */\n  #onAssemblyFinished (status) {\n    const url = status.assembly_ssl_url\n    this.client.getAssemblyStatus(url).then((finalStatus) => {\n      const assemblyId = finalStatus.assembly_id\n      const state = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...state.assemblies,\n          [assemblyId]: finalStatus,\n        },\n      })\n      this.uppy.emit('transloadit:complete', finalStatus)\n    })\n  }\n\n  async #cancelAssembly (assembly) {\n    await this.client.cancelAssembly(assembly)\n    // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly\n    this.uppy.emit('transloadit:assembly-cancelled', assembly)\n  }\n\n  /**\n   * When all files are removed, cancel in-progress Assemblies.\n   */\n  #onCancelAll = async ({ reason } = {}) => {\n    try {\n      if (reason !== 'user') return\n\n      const { uploadsAssemblies } = this.getPluginState()\n      const assemblyIDs = Object.values(uploadsAssemblies).flat(1)\n      const assemblies = assemblyIDs.map((assemblyID) => this.getAssembly(assemblyID))\n\n      await Promise.all(assemblies.map((assembly) => this.#cancelAssembly(assembly)))\n    } catch (err) {\n      this.uppy.log(err)\n    }\n  }\n\n  /**\n   * Custom state serialization for the Golden Retriever plugin.\n   * It will pass this back to the `_onRestored` function.\n   *\n   * @param {Function} setData\n   */\n  #getPersistentData = (setData) => {\n    const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n    setData({\n      [this.id]: {\n        assemblies,\n        uploadsAssemblies,\n      },\n    })\n  }\n\n  #onRestored = (pluginData) => {\n    const savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {}\n    const previousAssemblies = savedState.assemblies || {}\n    const uploadsAssemblies = savedState.uploadsAssemblies || {}\n\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return\n    }\n\n    // Convert loaded Assembly statuses to a Transloadit plugin state object.\n    const restoreState = (assemblies) => {\n      const files = {}\n      const results = []\n      for (const [id, status] of Object.entries(assemblies))  {\n        status.uploads.forEach((uploadedFile) => {\n          const file = this.#findFile(uploadedFile)\n          files[uploadedFile.id] = {\n            id: file.id,\n            assembly: id,\n            uploadedFile,\n          }\n        })\n\n        const state = this.getPluginState()\n        Object.keys(status.results).forEach((stepName) => {\n          for (const result of status.results[stepName]) {\n            const file = state.files[result.original_id]\n            result.localId = file ? file.id : null\n            results.push({\n              id: result.id,\n              result,\n              stepName,\n              assembly: id,\n            })\n          }\n        })\n      }\n\n      this.setPluginState({\n        assemblies,\n        files,\n        results,\n        uploadsAssemblies,\n      })\n    }\n\n    // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.\n    const restoreAssemblies = () => {\n      // eslint-disable-next-line no-shadow\n      const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n      // Set up the assembly watchers again for all the ongoing uploads.\n      Object.keys(uploadsAssemblies).forEach((uploadID) => {\n        const assemblyIDs = uploadsAssemblies[uploadID]\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n      })\n\n      const allAssemblyIDs = Object.keys(assemblies)\n      allAssemblyIDs.forEach((id) => {\n        const assembly = new Assembly(assemblies[id], this.#rateLimitedQueue)\n        this.#connectAssembly(assembly)\n      })\n    }\n\n    // Force-update all Assemblies to check for missed events.\n    const updateAssemblies = () => {\n      const { assemblies } = this.getPluginState()\n      return Promise.all(\n        Object.keys(assemblies).map((id) => {\n          return this.activeAssemblies[id].update()\n        }),\n      )\n    }\n\n    // Restore all Assembly state.\n    this.restored = Promise.resolve().then(() => {\n      restoreState(previousAssemblies)\n      restoreAssemblies()\n      return updateAssemblies()\n    })\n\n    this.restored.then(() => {\n      this.restored = null\n    })\n  }\n\n  #connectAssembly (assembly) {\n    const { status } = assembly\n    const id = status.assembly_id\n    this.activeAssemblies[id] = assembly\n\n    // Sync local `assemblies` state\n    assembly.on('status', (newStatus) => {\n      const { assemblies } = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...assemblies,\n          [id]: newStatus,\n        },\n      })\n    })\n\n    assembly.on('upload', (file) => {\n      this.#onFileUploadComplete(id, file)\n    })\n    assembly.on('error', (error) => {\n      error.assembly = assembly.status // eslint-disable-line no-param-reassign\n      this.uppy.emit('transloadit:assembly-error', assembly.status, error)\n    })\n\n    assembly.on('executing', () => {\n      this.uppy.emit('transloadit:assembly-executing', assembly.status)\n    })\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('result', (stepName, result) => {\n        this.#onResult(id, stepName, result)\n      })\n    }\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('finished', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    } else if (this.opts.waitForMetadata) {\n      assembly.on('metadata', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    }\n\n    // No need to connect to the socket if the Assembly has completed by now.\n    if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n      return assembly\n    }\n\n    assembly.connect()\n    return assembly\n  }\n\n  #prepareUpload = (fileIDs, uploadID) => {\n    const files = fileIDs.map(id => this.uppy.getFile(id))\n    const filesWithoutErrors = files.filter((file) => {\n      if (!file.error) {\n        this.uppy.emit('preprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('creatingAssembly'),\n        })\n        return true\n      }\n      return false\n    })\n\n    // eslint-disable-next-line no-shadow\n    const createAssembly = async ({ fileIDs, options }) => {\n      try {\n        const assembly = await this.#createAssembly(fileIDs, uploadID, options)\n        if (this.opts.importFromUploadURLs) {\n          await this.#reserveFiles(assembly, fileIDs)\n        }\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          this.uppy.emit('preprocess-complete', file)\n        })\n        return assembly\n      } catch (err)  {\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          // Clear preprocessing state when the Assembly could not be created,\n          // otherwise the UI gets confused about the lingering progress keys\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      }\n    }\n\n    const { uploadsAssemblies } = this.getPluginState()\n    this.setPluginState({\n      uploadsAssemblies: {\n        ...uploadsAssemblies,\n        [uploadID]: [],\n      },\n    })\n\n    const assemblyOptions = new AssemblyOptions(filesWithoutErrors, this.opts)\n\n    return assemblyOptions.build()\n      .then((assemblies) => Promise.all(assemblies.map(createAssembly)))\n      .then((maybeCreatedAssemblies) => {\n        const createdAssemblies = maybeCreatedAssemblies.filter(Boolean)\n        const assemblyIDs = createdAssemblies.map(assembly => assembly.status.assembly_id)\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n        return Promise.all(createdAssemblies.map(assembly => this.#connectAssembly(assembly)))\n      })\n      // If something went wrong before any Assemblies could be created,\n      // clear all processing state.\n      .catch((err) => {\n        filesWithoutErrors.forEach((file) => {\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      })\n  }\n\n  #afterUpload = (fileIDs, uploadID) => {\n    const files = fileIDs.map(fileID => this.uppy.getFile(fileID))\n    // Only use files without errors\n    const filteredFileIDs = files.filter((file) => !file.error).map(file => file.id)\n\n    const state = this.getPluginState()\n\n    // If we're still restoring state, wait for that to be done.\n    if (this.restored) {\n      return this.restored.then(() => {\n        return this.#afterUpload(filteredFileIDs, uploadID)\n      })\n    }\n\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    const closeSocketConnections = () => {\n      assemblyIDs.forEach((assemblyID) => {\n        const assembly = this.activeAssemblies[assemblyID]\n        assembly.close()\n        delete this.activeAssemblies[assemblyID]\n      })\n    }\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.#shouldWaitAfterUpload()) {\n      closeSocketConnections()\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n      this.uppy.addResultData(uploadID, { transloadit: assemblies })\n      return Promise.resolve()\n    }\n\n    // If no Assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      this.uppy.addResultData(uploadID, { transloadit: [] })\n      return Promise.resolve()\n    }\n\n    const incompleteFiles = files.filter(file => !hasProperty(this.completedFiles, file.id))\n    incompleteFiles.forEach((file) => {\n      this.uppy.emit('postprocess-progress', file, {\n        mode: 'indeterminate',\n        message: this.i18n('encoding'),\n      })\n    })\n\n    const watcher = this.assemblyWatchers[uploadID]\n    return watcher.promise.then(() => {\n      closeSocketConnections()\n\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n\n      // Remove the Assembly ID list for this upload,\n      // it's no longer going to be used anywhere.\n      const uploadsAssemblies = { ...this.getPluginState().uploadsAssemblies }\n      delete uploadsAssemblies[uploadID]\n      this.setPluginState({ uploadsAssemblies })\n\n      this.uppy.addResultData(uploadID, {\n        transloadit: assemblies,\n      })\n    })\n  }\n\n  #closeAssemblyIfExists = (assemblyID) => {\n    this.activeAssemblies[assemblyID]?.close()\n  }\n\n  #onError = (err = null, uploadID) => {\n    const state = this.getPluginState()\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n    assemblyIDs?.forEach(this.#closeAssemblyIfExists)\n\n    this.client.submitError(err)\n      // if we can't report the error that sucks\n      .catch(sendErrorToConsole(err))\n  }\n\n  #onTusError = (file, err) => {\n    this.#closeAssemblyIfExists(file?.transloadit?.assembly)\n    if (err?.message?.startsWith('tus: ')) {\n      const endpoint = err.originalRequest?.getUnderlyingObject()?.responseURL\n      this.client.submitError(err, { endpoint, type: 'TUS_ERROR' })\n        // if we can't report the error that sucks\n        .catch(sendErrorToConsole(err))\n    }\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.#prepareUpload)\n    this.uppy.addPostProcessor(this.#afterUpload)\n\n    // We may need to close socket.io connections on error.\n    this.uppy.on('error', this.#onError)\n\n    // Handle cancellation.\n    this.uppy.on('cancel-all', this.#onCancelAll)\n\n    // For error reporting.\n    this.uppy.on('upload-error', this.#onTusError)\n\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this.#onFileUploadURLAvailable)\n    } else {\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to an outdated Assembly, and we won't get socket events for it.\n        //\n        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's\n        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,\n        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that\n        // were added to the Assembly, so we can properly complete it. All that state is handled by\n        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,\n        // and we disable Tus's default resume implementation to prevent bad behaviours.\n        storeFingerprintForResuming: false,\n        // Disable Companion's retry optimisation; we need to change the endpoint on retry\n        // so it can't just reuse the same tus.Upload instance server-side.\n        useFastRemoteRetry: false,\n        // Only send Assembly metadata to the tus endpoint.\n        metaFields: ['assembly_url', 'filename', 'fieldname'],\n        // Pass the limit option to @uppy/tus\n        limit: this.opts.limit,\n        rateLimitedQueue: this.#rateLimitedQueue,\n        retryDelays: this.opts.retryDelays,\n      })\n    }\n\n    this.uppy.on('restore:get-data', this.#getPersistentData)\n    this.uppy.on('restored', this.#onRestored)\n\n    this.setPluginState({\n      // Contains Assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: [],\n    })\n\n    // We cannot cancel individual files because Assemblies tend to contain many files.\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: false,\n      },\n    })\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.#prepareUpload)\n    this.uppy.removePostProcessor(this.#afterUpload)\n    this.uppy.off('error', this.#onError)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this.#onFileUploadURLAvailable)\n    }\n\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: true,\n      },\n    })\n  }\n\n  getAssembly (id) {\n    const { assemblies } = this.getPluginState()\n    return assemblies[id]\n  }\n\n  getAssemblyFiles (assemblyID) {\n    return this.uppy.getFiles().filter((file) => {\n      return file?.transloadit?.assembly === assemblyID\n    })\n  }\n}\n\nexport {\n  ALLOWED_COMPANION_PATTERN,\n  COMPANION,\n  ALLOWED_COMPANION_PATTERN as COMPANION_PATTERN,\n}\n\n// Backward compatibility: we want `COMPANION` and `COMPANION_PATTERN`\n// to keep being accessible as static properties of `Transloadit` to avoid a\n// breaking change.\nTransloadit.ALLOWED_COMPANION_PATTERN = ALLOWED_COMPANION_PATTERN // TODO: remove this line on the next major\nTransloadit.COMPANION = COMPANION // TODO: remove this line on the next major\nTransloadit.COMPANION_PATTERN = ALLOWED_COMPANION_PATTERN // TODO: remove this line on the next major\n"]}