{"version":3,"sources":["index.js"],"names":["throttle","BasePlugin","ServiceWorkerStore","IndexedDBStore","MetaDataStore","packageJson","GoldenRetriever","constructor","uppy","opts","addBlobToStores","file","isRemote","put","catch","err","log","removeBlobFromStores","delete","id","replaceBlobInStores","handleRestoreConfirmed","currentUploads","getState","resumeAll","Object","keys","forEach","uploadId","restore","setState","recoveredState","abortRestore","fileIDs","files","deleteBlobs","then","length","cancelAll","cleanup","handleComplete","successful","map","restoreBlobs","getFiles","Promise","all","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","resultingArrayOfObjects","blobs","onBlobsLoaded","type","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","leading","trailing","restoreState","savedState","load","savedPluginData","pluginData","getWaitingFiles","waitingFiles","progress","uploadStarted","getUploadingFiles","uploadingFiles","uploadIDs","uploadID","filesInUpload","fileID","getFile","filesToSave","filesToSaveWithoutData","isRestored","data","preview","emit","assign","save","resolve","list","localFilesOnly","filter","numberOfFilesRecovered","numberOfFilesTryingToRecover","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isGhost","promises","install","on","uninstall","off","VERSION","version"],"mappings":"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","sourcesContent":["import throttle from 'lodash.throttle'\nimport BasePlugin from '@uppy/core/lib/BasePlugin'\nimport ServiceWorkerStore from './ServiceWorkerStore.js'\nimport IndexedDBStore from './IndexedDBStore.js'\nimport MetaDataStore from './MetaDataStore.js'\n\nimport packageJson from '../package.json'\n\n/**\n * The GoldenRetriever plugin — restores selected files and resumes uploads\n * after a closed tab or a browser crash!\n *\n * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n * https://uppy.io/blog/2017/07/golden-retriever/\n */\nexport default class GoldenRetriever extends BasePlugin {\n  static VERSION = packageJson.version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'debugger'\n    this.id = this.opts.id || 'GoldenRetriever'\n    this.title = 'Golden Retriever'\n\n    const defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: uppy.getID(),\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() })\n    }\n    this.IndexedDBStore = new IndexedDBStore({\n      expires: this.opts.expires,\n      ...this.opts.indexedDB || {},\n      storeName: uppy.getID(),\n    })\n\n    this.saveFilesStateToLocalStorage = throttle(\n      this.saveFilesStateToLocalStorage.bind(this),\n      500,\n      { leading: true, trailing: true },\n    )\n    this.restoreState = this.restoreState.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  restoreState () {\n    const savedState = this.MetaDataStore.load()\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {},\n        recoveredState: savedState,\n      })\n      this.savedPluginData = savedState.pluginData\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles () {\n    const waitingFiles = {}\n\n    this.uppy.getFiles().forEach((file) => {\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[file.id] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles () {\n    const uploadingFiles = {}\n\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage () {\n    const filesToSave = {\n      ...this.getWaitingFiles(),\n      ...this.getUploadingFiles(),\n    }\n\n    // If all files have been removed by the user, clear recovery state\n    if (Object.keys(filesToSave).length === 0) {\n      if (this.uppy.getState().recoveredState !== null) {\n        this.uppy.setState({ recoveredState: null })\n      }\n      MetaDataStore.cleanup(this.uppy.opts.id)\n      return\n    }\n\n    // We dont’t need to store file.data on local files, because the actual blob will be restored later,\n    // and we want to avoid having weird properties in the serialized object.\n    // Also adding file.isRestored to all files, since they will be restored from local storage\n    const filesToSaveWithoutData = {}\n    Object.keys(filesToSave).forEach((file) => {\n      if (filesToSave[file].isRemote) {\n        filesToSaveWithoutData[file] = {\n          ...filesToSave[file],\n          isRestored: true,\n        }\n      } else {\n        filesToSaveWithoutData[file] = {\n          ...filesToSave[file],\n          isRestored: true,\n          data: null,\n          preview: null,\n        }\n      }\n    })\n\n    const pluginData = {}\n    // TODO Find a better way to do this?\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', (data) => {\n      Object.assign(pluginData, data)\n    })\n\n    const { currentUploads } = this.uppy.getState()\n\n    this.MetaDataStore.save({\n      currentUploads,\n      files: filesToSaveWithoutData,\n      pluginData,\n    })\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    if (!this.ServiceWorkerStore) {\n      return Promise.resolve({})\n    }\n\n    return this.ServiceWorkerStore.list().then((blobs) => {\n      const files = this.uppy.getFiles()\n      const localFilesOnly = files.filter((file) => {\n        // maybe && !file.progress.uploadComplete\n        return !file.isRemote\n      })\n\n      const numberOfFilesRecovered = Object.keys(blobs).length\n      const numberOfFilesTryingToRecover = localFilesOnly.length\n\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    return this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const obsoleteBlobs = []\n    const updatedFiles = { ...this.uppy.getState().files }\n\n    // Loop through blobs that we can restore, add blobs to file objects\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.uppy.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true,\n        isGhost: false,\n      }\n      updatedFiles[fileID] = { ...originalFile, ...updatedFileData }\n    })\n\n    // Loop through files that we can’t restore fully — we only have meta, not blobs,\n    // set .isGhost on them, also set isRestored to all files\n    Object.keys(updatedFiles).forEach((fileID) => {\n      if (updatedFiles[fileID].data === null) {\n        updatedFiles[fileID] = {\n          ...updatedFiles[fileID],\n          isGhost: true,\n        }\n      }\n    })\n\n    this.uppy.setState({\n      files: updatedFiles,\n    })\n\n    this.uppy.emit('restored', this.savedPluginData)\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`, 'warning')\n        this.uppy.log(err)\n      })\n    }\n  }\n\n  deleteBlobs (fileIDs) {\n    const promises = []\n    fileIDs.forEach((id) => {\n      if (this.ServiceWorkerStore) {\n        promises.push(this.ServiceWorkerStore.delete(id))\n      }\n      if (this.IndexedDBStore) {\n        promises.push(this.IndexedDBStore.delete(id))\n      }\n    })\n    return Promise.all(promises)\n  }\n\n  addBlobToStores = (file) => {\n    if (file.isRemote) return\n\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.put(file).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n\n    this.IndexedDBStore.put(file).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  removeBlobFromStores = (file) => {\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.delete(file.id).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n    this.IndexedDBStore.delete(file.id).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  replaceBlobInStores = (file) => {\n    this.removeBlobFromStores(file)\n    this.addBlobToStores(file)\n  }\n\n  handleRestoreConfirmed = () => {\n    this.uppy.log('[GoldenRetriever] Restore confirmed, proceeding...')\n    // start all uploads again when file blobs are restored\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      this.uppy.resumeAll()\n      Object.keys(currentUploads).forEach((uploadId) => {\n        this.uppy.restore(uploadId, currentUploads[uploadId])\n      })\n    }\n    this.uppy.setState({ recoveredState: null })\n  }\n\n  abortRestore = () => {\n    this.uppy.log('[GoldenRetriever] Aborting restore...')\n\n    const fileIDs = Object.keys(this.uppy.getState().files)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${fileIDs.length} files`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${fileIDs.length} files`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.cancelAll()\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  handleComplete = ({ successful }) => {\n    const fileIDs = successful.map((file) => file.id)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${successful.length} files that finished uploading`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${successful.length} files that finished uploading`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  restoreBlobs = () => {\n    if (this.uppy.getFiles().length > 0) {\n      Promise.all([\n        this.loadFileBlobsFromServiceWorker(),\n        this.loadFileBlobsFromIndexedDB(),\n      ]).then((resultingArrayOfObjects) => {\n        const blobs = { ...resultingArrayOfObjects[0], ...resultingArrayOfObjects[1] }\n        this.onBlobsLoaded(blobs)\n      })\n    } else {\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...')\n    }\n  }\n\n  install () {\n    this.restoreState()\n    this.restoreBlobs()\n\n    this.uppy.on('file-added', this.addBlobToStores)\n    this.uppy.on('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.on('file-removed', this.removeBlobFromStores)\n    // TODO: the `state-update` is bad practise. It fires on any state change in Uppy\n    // or any state change in any of the plugins. We should to able to only listen\n    // for the state changes we need, somehow.\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.on('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.on('restore-canceled', this.abortRestore)\n    this.uppy.on('complete', this.handleComplete)\n  }\n\n  uninstall () {\n    this.uppy.off('file-added', this.addBlobToStores)\n    this.uppy.off('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.off('file-removed', this.removeBlobFromStores)\n    this.uppy.off('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.off('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.off('restore-canceled', this.abortRestore)\n    this.uppy.off('complete', this.handleComplete)\n  }\n}\n"]}