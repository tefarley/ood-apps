{"version":3,"sources":["index.js"],"names":["packageJson","STATE_UPDATE","defaultSelector","id","state","uppy","getPatch","prev","next","nextKeys","Object","keys","patch","forEach","k","Symbol","for","ReduxStore","constructor","opts","store","selector","setState","dispatch","type","payload","getState","subscribe","cb","prevState","nextState","VERSION","version","reducer","action","newState","middleware"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure'\n\nimport packageJson from '../package.json'\n\n// Redux action name.\nexport const STATE_UPDATE = 'uppy/STATE_UPDATE'\n\n// Pluck Uppy state from the Redux store in the default location.\nconst defaultSelector = (id) => (state) => state.uppy[id]\n\nfunction getPatch (prev, next) {\n  const nextKeys = Object.keys(next)\n  const patch = {}\n  nextKeys.forEach((k) => {\n    if (prev[k] !== next[k]) patch[k] = next[k]\n  })\n  return patch\n}\n\n/**\n * Redux store.\n *\n * @param {object} opts.store - The Redux store to use.\n * @param {string} opts.id - This store instance's ID. Defaults to a random string.\n *    If you need to access Uppy state through Redux, eg. to render custom UI, set this to something constant.\n * @param {Function} opts.selector - Function, `(state) => uppyState`, to pluck state from the Redux store.\n *    Defaults to retrieving `state.uppy[opts.id]`. Override if you placed Uppy state elsewhere in the Redux store.\n */\nexport class ReduxStore {\n  static VERSION = packageJson.version\n\n  #id\n\n  #selector\n\n  #store\n\n  constructor (opts) {\n    this.#store = opts.store\n    this.#id = opts.id || nanoid()\n    this.#selector = opts.selector || defaultSelector(this.#id)\n\n    // Calling `setState` to dispatch an action to the Redux store.\n    // The intent is to make sure that the reducer has run once.\n    this.setState({})\n  }\n\n  setState (patch) {\n    this.#store.dispatch({\n      type: STATE_UPDATE,\n      id: this.#id,\n      payload: patch,\n    })\n  }\n\n  getState () {\n    return this.#selector(this.#store.getState())\n  }\n\n  subscribe (cb) {\n    let prevState = this.getState()\n    return this.#store.subscribe(() => {\n      const nextState = this.getState()\n      if (prevState !== nextState) {\n        const patch = getPatch(prevState, nextState)\n        cb(prevState, nextState, patch)\n        prevState = nextState\n      }\n    })\n  }\n\n  [Symbol.for('uppy test: get id')] () {\n    return this.#id\n  }\n}\n\nexport function reducer (state = {}, action) {\n  if (action.type === STATE_UPDATE) {\n    const newState = { ...state[action.id], ...action.payload }\n    return { ...state, [action.id]: newState }\n  }\n  return state\n}\n\nexport function middleware () {\n  // Do nothing, at the moment.\n  return () => (next) => (action) => {\n    next(action)\n  }\n}\n\nexport default ReduxStore\n\n// Backward compatibility: we want these to keep being available as static\n// properties of `ReduxStore` to avoid a breaking change.\n// TODO: remove these in the next semver-major.\nReduxStore.ReduxStore = ReduxStore\nReduxStore.STATE_UPDATE = STATE_UPDATE\nReduxStore.reducer = reducer\nReduxStore.middleware = middleware\n"]}