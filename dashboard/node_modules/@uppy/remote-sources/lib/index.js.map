{"version":3,"sources":["index.js"],"names":["Dashboard","Dropbox","GoogleDrive","Instagram","Facebook","OneDrive","Box","Unsplash","Url","Zoom","packageJson","availablePlugins","RemoteSources","BasePlugin","constructor","uppy","opts","Set","id","type","defaultOptions","sources","target","companionUrl","Error","setOptions","newOpts","uninstall","install","forEach","pluginId","optsForRemoteSourcePlugin","undefined","plugin","find","p","name","pluginNames","map","formatter","Intl","ListFormat","style","format","use","add","getPlugin","removePlugin","clear","VERSION","version"],"mappings":";;AAAA;;;;;;;;MACOA,S;;MACAC,O;;MACAC,W;;MACAC,S;;MACAC,Q;;MACAC,Q;;MACAC,G;;MACAC,Q;;MACAC,G;;MACAC,I;;MAEAC,W;;;AAEP,MAAMC,gBAAgB,GAAG,CACvBL,GADuB,EAEvBL,OAFuB,EAGvBG,QAHuB,EAIvBF,WAJuB,EAKvBC,SALuB,EAMvBE,QANuB,EAOvBE,QAPuB,EAQvBC,GARuB,EASvBC,IATuB,CAAzB;;;;AAYe,MAAMG,aAAN,SAA4BC,gBAA5B,CAAuC;AAKpDC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAc;AACvB,UAAMD,IAAN,EAAYC,IAAZ;AADuB;AAAA;AAAA,aAFL,IAAIC,GAAJ;AAEK;AAEvB,SAAKC,EAAL,GAAU,KAAKF,IAAL,CAAUE,EAAV,IAAgB,eAA1B;AACA,SAAKC,IAAL,GAAY,UAAZ;AAEA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,OAAO,EAAE,CACP,KADO,EAEP,SAFO,EAGP,UAHO,EAIP,aAJO,EAKP,WALO,EAMP,UANO,EAOP,UAPO,EAQP,KARO,CADY;AAWrBC,MAAAA,MAAM,EAAEtB;AAXa,KAAvB;AAaA,SAAKgB,IAAL,GAAY,EAAE,GAAGI,cAAL;AAAqB,SAAGJ;AAAxB,KAAZ;;AAEA,QAAI,KAAKA,IAAL,CAAUO,YAAV,IAA0B,IAA9B,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,6GAAV,CAAN;AACD;AACF;;AAEDC,EAAAA,UAAU,CAAEC,OAAF,EAAW;AACnB,SAAKC,SAAL;AACA,UAAMF,UAAN,CAAiBC,OAAjB;AACA,SAAKE,OAAL;AACD;;AAEDA,EAAAA,OAAO,GAAI;AACT,SAAKZ,IAAL,CAAUK,OAAV,CAAkBQ,OAAlB,CAA2BC,QAAD,IAAc;AACtC,YAAMC,yBAAyB,GAAG,EAAE,GAAG,KAAKf,IAAV;AAAgBK,QAAAA,OAAO,EAAEW;AAAzB,OAAlC;AACA,YAAMC,MAAM,GAAGtB,gBAAgB,CAACuB,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWN,QAAtC,CAAf;;AACA,UAAIG,MAAM,IAAI,IAAd,EAAoB;AAClB,cAAMI,WAAW,GAAG1B,gBAAgB,CAAC2B,GAAjB,CAAqBH,CAAC,IAAIA,CAAC,CAACC,IAA5B,CAApB;AACA,cAAMG,SAAS,GAAG,IAAIC,IAAI,CAACC,UAAT,CAAoB,IAApB,EAA0B;AAAEC,UAAAA,KAAK,EAAE,MAAT;AAAiBvB,UAAAA,IAAI,EAAE;AAAvB,SAA1B,CAAlB;AACA,cAAM,IAAIK,KAAJ,CAAW,oBAAmBM,QAAS,oBAAmBS,SAAS,CAACI,MAAV,CAAiBN,WAAjB,CAA8B,GAAxF,CAAN;AACD;;AACD,WAAKtB,IAAL,CAAU6B,GAAV,CAAcX,MAAd,EAAsBF,yBAAtB,EARsC,CAStC;AACA;;AACA,8EAAuBc,GAAvB,CAA2B,KAAK9B,IAAL,CAAU+B,SAAV,CAAoBhB,QAApB,CAA3B;AACD,KAZD;AAaD;;AAEDH,EAAAA,SAAS,GAAI;AACX,SAAK,MAAMM,MAAX,gCAAqB,IAArB,yCAA6C;AAC3C,WAAKlB,IAAL,CAAUgC,YAAV,CAAuBd,MAAvB;AACD;;AACD,4EAAuBe,KAAvB;AACD;;AAzDmD;;AAAjCpC,a,CACZqC,O,GAAUvC,WAAW,CAACwC,O;iBADVtC,a","sourcesContent":["import { BasePlugin } from '@uppy/core'\nimport Dashboard from '@uppy/dashboard'\nimport Dropbox from '@uppy/dropbox'\nimport GoogleDrive from '@uppy/google-drive'\nimport Instagram from '@uppy/instagram'\nimport Facebook from '@uppy/facebook'\nimport OneDrive from '@uppy/onedrive'\nimport Box from '@uppy/box'\nimport Unsplash from '@uppy/unsplash'\nimport Url from '@uppy/url'\nimport Zoom from '@uppy/zoom'\n\nimport packageJson from '../package.json'\n\nconst availablePlugins = [\n  Box,\n  Dropbox,\n  Facebook,\n  GoogleDrive,\n  Instagram,\n  OneDrive,\n  Unsplash,\n  Url,\n  Zoom,\n]\n\nexport default class RemoteSources extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #installedPlugins = new Set()\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'RemoteSources'\n    this.type = 'acquirer'\n\n    const defaultOptions = {\n      sources: [\n        'Box',\n        'Dropbox',\n        'Facebook',\n        'GoogleDrive',\n        'Instagram',\n        'OneDrive',\n        'Unsplash',\n        'Url',\n      ],\n      target: Dashboard,\n    }\n    this.opts = { ...defaultOptions, ...opts }\n\n    if (this.opts.companionUrl == null) {\n      throw new Error('Please specify companionUrl for RemoteSources to work, see https://uppy.io/docs/remote-sources#companionUrl')\n    }\n  }\n\n  setOptions (newOpts) {\n    this.uninstall()\n    super.setOptions(newOpts)\n    this.install()\n  }\n\n  install () {\n    this.opts.sources.forEach((pluginId) => {\n      const optsForRemoteSourcePlugin = { ...this.opts, sources: undefined }\n      const plugin = availablePlugins.find(p => p.name === pluginId)\n      if (plugin == null) {\n        const pluginNames = availablePlugins.map(p => p.name)\n        const formatter = new Intl.ListFormat('en', { style: 'long', type: 'disjunction' })\n        throw new Error(`Invalid plugin: \"${pluginId}\" is not one of: ${formatter.format(pluginNames)}.`)\n      }\n      this.uppy.use(plugin, optsForRemoteSourcePlugin)\n      // `plugin` is a class, but we want to track the instance object\n      // so we have to do `getPlugin` here.\n      this.#installedPlugins.add(this.uppy.getPlugin(pluginId))\n    })\n  }\n\n  uninstall () {\n    for (const plugin of this.#installedPlugins) {\n      this.uppy.removePlugin(plugin)\n    }\n    this.#installedPlugins.clear()\n  }\n}\n"]}