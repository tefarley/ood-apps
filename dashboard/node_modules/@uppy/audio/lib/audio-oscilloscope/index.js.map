{"version":3,"sources":["index.js"],"names":["isFunction","v","result","AudioOscilloscope","constructor","canvas","options","draw","canvasOptions","canvasContextOptions","canvasContext","analyser","bufferLength","dataArray","width","height","getContext","fillStyle","strokeStyle","lineWidth","onDrawFrame","addSource","streamSource","audioContext","context","createAnalyser","fftSize","frequencyBinCount","source","createBufferSource","Uint8Array","getByteTimeDomainData","connect","ctx","w","h","fillRect","beginPath","sliceWidth","x","moveTo","i","y","lineTo","stroke","requestAnimationFrame"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,CAAqBC,CAArB,EAAwB;AACtB,SAAO,OAAOA,CAAP,KAAa,UAApB;AACD;;AAED,SAASC,MAAT,CAAiBD,CAAjB,EAAoB;AAClB,SAAOD,UAAU,CAACC,CAAD,CAAV,GAAgBA,CAAC,EAAjB,GAAsBA,CAA7B;AACD;AAED;AACA;AACA;;;;;AACe,MAAME,iBAAN,CAAwB;AACrCC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,OAAV,EAAwB;AAAA,QAAdA,OAAc;AAAdA,MAAAA,OAAc,GAAJ,EAAI;AAAA;;AAAA;AAAA;AAAA,aAsE3B,MAAM,KAAKC,IAAL;AAtEqB;AACjC,UAAMC,aAAa,GAAGF,OAAO,CAACD,MAAR,IAAkB,EAAxC;AACA,UAAMI,oBAAoB,GAAGH,OAAO,CAACI,aAAR,IAAyB,EAAtD;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKR,MAAL,GAAcA,MAAd;AACA,SAAKS,KAAL,GAAaZ,MAAM,CAACM,aAAa,CAACM,KAAf,CAAN,IAA+B,KAAKT,MAAL,CAAYS,KAAxD;AACA,SAAKC,MAAL,GAAcb,MAAM,CAACM,aAAa,CAACO,MAAf,CAAN,IAAgC,KAAKV,MAAL,CAAYU,MAA1D;AACA,SAAKV,MAAL,CAAYS,KAAZ,GAAoB,KAAKA,KAAzB;AACA,SAAKT,MAAL,CAAYU,MAAZ,GAAqB,KAAKA,MAA1B;AACA,SAAKL,aAAL,GAAqB,KAAKL,MAAL,CAAYW,UAAZ,CAAuB,IAAvB,CAArB;AACA,SAAKN,aAAL,CAAmBO,SAAnB,GAA+Bf,MAAM,CAACO,oBAAoB,CAACQ,SAAtB,CAAN,IAA0C,oBAAzE;AACA,SAAKP,aAAL,CAAmBQ,WAAnB,GAAiChB,MAAM,CAACO,oBAAoB,CAACS,WAAtB,CAAN,IAA4C,cAA7E;AACA,SAAKR,aAAL,CAAmBS,SAAnB,GAA+BjB,MAAM,CAACO,oBAAoB,CAACU,SAAtB,CAAN,IAA0C,CAAzE;AACA,SAAKC,WAAL,GAAmBpB,UAAU,CAACM,OAAO,CAACc,WAAT,CAAV,GAAkCd,OAAO,CAACc,WAA1C,GAAwD,MAAM,CAAE,CAAnF;AACD;;AAEDC,EAAAA,SAAS,CAAEC,YAAF,EAAgB;AACvB,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,YAAL,GAAoB,KAAKD,YAAL,CAAkBE,OAAtC;AACA,SAAKb,QAAL,GAAgB,KAAKY,YAAL,CAAkBE,cAAlB,EAAhB;AACA,SAAKd,QAAL,CAAce,OAAd,GAAwB,IAAxB;AACA,SAAKd,YAAL,GAAoB,KAAKD,QAAL,CAAcgB,iBAAlC;AACA,SAAKC,MAAL,GAAc,KAAKL,YAAL,CAAkBM,kBAAlB,EAAd;AACA,SAAKhB,SAAL,GAAiB,IAAIiB,UAAJ,CAAe,KAAKlB,YAApB,CAAjB;AACA,SAAKD,QAAL,CAAcoB,qBAAd,CAAoC,KAAKlB,SAAzC;AACA,SAAKS,YAAL,CAAkBU,OAAlB,CAA0B,KAAKrB,QAA/B;AACD;;AAEDJ,EAAAA,IAAI,GAAI;AACN,UAAM;AAAEI,MAAAA,QAAF;AAAYE,MAAAA,SAAZ;AAAuBD,MAAAA;AAAvB,QAAwC,IAA9C;AACA,UAAMqB,GAAG,GAAG,KAAKvB,aAAjB;AACA,UAAMwB,CAAC,GAAG,KAAKpB,KAAf;AACA,UAAMqB,CAAC,GAAG,KAAKpB,MAAf;;AAEA,QAAIJ,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACoB,qBAAT,CAA+BlB,SAA/B;AACD;;AAEDoB,IAAAA,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBF,CAAnB,EAAsBC,CAAtB;AACAF,IAAAA,GAAG,CAACI,SAAJ;AAEA,UAAMC,UAAU,GAAIJ,CAAC,GAAG,GAAL,GAAYtB,YAA/B;AACA,QAAI2B,CAAC,GAAG,CAAR;;AAEA,QAAI,CAAC3B,YAAL,EAAmB;AACjBqB,MAAAA,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAc,KAAKzB,MAAL,GAAc,CAA5B;AACD;;AAED,SAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,YAApB,EAAkC6B,CAAC,EAAnC,EAAuC;AACrC,YAAMxC,CAAC,GAAGY,SAAS,CAAC4B,CAAD,CAAT,GAAe,KAAzB;AACA,YAAMC,CAAC,GAAGzC,CAAC,IAAIkC,CAAC,GAAG,CAAR,CAAX;;AAEA,UAAIM,CAAC,KAAK,CAAV,EAAa;AACXR,QAAAA,GAAG,CAACO,MAAJ,CAAWD,CAAX,EAAcG,CAAd;AACD,OAFD,MAEO;AACLT,QAAAA,GAAG,CAACU,MAAJ,CAAWJ,CAAX,EAAcG,CAAd;AACD;;AAEDH,MAAAA,CAAC,IAAID,UAAL;AACD;;AAEDL,IAAAA,GAAG,CAACU,MAAJ,CAAWT,CAAX,EAAcC,CAAC,GAAG,CAAlB;AACAF,IAAAA,GAAG,CAACW,MAAJ;AAEA,SAAKxB,WAAL,CAAiB,IAAjB;AACAyB,IAAAA,qBAAqB,6BAAC,IAAD,gBAArB;AACD;;AArEoC;;iBAAlB1C,iB","sourcesContent":["function isFunction (v) {\n  return typeof v === 'function'\n}\n\nfunction result (v) {\n  return isFunction(v) ? v() : v\n}\n\n/* Audio Oscilloscope\n  https://github.com/miguelmota/audio-oscilloscope\n*/\nexport default class AudioOscilloscope {\n  constructor (canvas, options = {}) {\n    const canvasOptions = options.canvas || {}\n    const canvasContextOptions = options.canvasContext || {}\n    this.analyser = null\n    this.bufferLength = 0\n    this.dataArray = []\n    this.canvas = canvas\n    this.width = result(canvasOptions.width) || this.canvas.width\n    this.height = result(canvasOptions.height) || this.canvas.height\n    this.canvas.width = this.width\n    this.canvas.height = this.height\n    this.canvasContext = this.canvas.getContext('2d')\n    this.canvasContext.fillStyle = result(canvasContextOptions.fillStyle) || 'rgb(255, 255, 255)'\n    this.canvasContext.strokeStyle = result(canvasContextOptions.strokeStyle) || 'rgb(0, 0, 0)'\n    this.canvasContext.lineWidth = result(canvasContextOptions.lineWidth) || 1\n    this.onDrawFrame = isFunction(options.onDrawFrame) ? options.onDrawFrame : () => {}\n  }\n\n  addSource (streamSource) {\n    this.streamSource = streamSource\n    this.audioContext = this.streamSource.context\n    this.analyser = this.audioContext.createAnalyser()\n    this.analyser.fftSize = 2048\n    this.bufferLength = this.analyser.frequencyBinCount\n    this.source = this.audioContext.createBufferSource()\n    this.dataArray = new Uint8Array(this.bufferLength)\n    this.analyser.getByteTimeDomainData(this.dataArray)\n    this.streamSource.connect(this.analyser)\n  }\n\n  draw () {\n    const { analyser, dataArray, bufferLength } = this\n    const ctx = this.canvasContext\n    const w = this.width\n    const h = this.height\n\n    if (analyser) {\n      analyser.getByteTimeDomainData(dataArray)\n    }\n\n    ctx.fillRect(0, 0, w, h)\n    ctx.beginPath()\n\n    const sliceWidth = (w * 1.0) / bufferLength\n    let x = 0\n\n    if (!bufferLength) {\n      ctx.moveTo(0, this.height / 2)\n    }\n\n    for (let i = 0; i < bufferLength; i++) {\n      const v = dataArray[i] / 128.0\n      const y = v * (h / 2)\n\n      if (i === 0) {\n        ctx.moveTo(x, y)\n      } else {\n        ctx.lineTo(x, y)\n      }\n\n      x += sliceWidth\n    }\n\n    ctx.lineTo(w, h / 2)\n    ctx.stroke()\n\n    this.onDrawFrame(this)\n    requestAnimationFrame(this.#draw)\n  }\n\n  #draw = () => this.draw()\n}\n"]}