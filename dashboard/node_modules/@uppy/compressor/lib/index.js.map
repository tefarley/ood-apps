{"version":3,"sources":["index.js"],"names":["getFileNameAndExtension","prettierBytes","CompressorJS","locale","Compressor","BasePlugin","constructor","uppy","opts","id","type","defaultLocale","defaultOptions","quality","limit","RateLimitedQueue","i18nInit","prepareUpload","bind","compress","blob","Promise","resolve","reject","success","error","fileIDs","totalCompressedSize","compressedFiles","compressAndApplyResult","wrapPromiseFunction","file","compressedBlob","data","compressedSavingsSize","size","log","name","extension","setFileState","setFileMeta","push","err","promises","map","fileID","getFile","emit","mode","message","i18n","isRemote","slice","startsWith","all","info","install","addPreProcessor","uninstall","removePreProcessor"],"mappings":"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","sourcesContent":["import { BasePlugin } from '@uppy/core'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension'\nimport prettierBytes from '@transloadit/prettier-bytes'\nimport CompressorJS from 'compressorjs/dist/compressor.common.js'\nimport locale from './locale.js'\n\nexport default class Compressor extends BasePlugin {\n  #RateLimitedQueue\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'Compressor'\n    this.type = 'modifier'\n\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      quality: 0.6,\n      limit: 10,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.#RateLimitedQueue = new RateLimitedQueue(this.opts.limit)\n\n    this.i18nInit()\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.compress = this.compress.bind(this)\n  }\n\n  compress (blob) {\n    return new Promise((resolve, reject) => {\n      /* eslint-disable no-new */\n      new CompressorJS(blob, {\n        ...this.opts,\n        success: resolve,\n        error: reject,\n      })\n    })\n  }\n\n  async prepareUpload (fileIDs) {\n    let totalCompressedSize = 0\n    const compressedFiles = []\n    const compressAndApplyResult = this.#RateLimitedQueue.wrapPromiseFunction(\n      async (file) => {\n        try {\n          const compressedBlob = await this.compress(file.data)\n          const compressedSavingsSize = file.data.size - compressedBlob.size\n          this.uppy.log(`[Image Compressor] Image ${file.id} compressed by ${prettierBytes(compressedSavingsSize)}`)\n          totalCompressedSize += compressedSavingsSize\n          const { name, type, size } = compressedBlob\n          const extension = name && getFileNameAndExtension(name).extension\n          this.uppy.setFileState(file.id, {\n            ...(name && { name }),\n            ...(extension && { extension }),\n            ...(type && { type }),\n            ...(size && { size }),\n            data: compressedBlob,\n          })\n          this.uppy.setFileMeta(file.id, { type })\n          compressedFiles.push(file)\n        } catch (err) {\n          this.uppy.log(`[Image Compressor] Failed to compress ${file.id}:`, 'warning')\n          this.uppy.log(err, 'warning')\n        }\n      },\n    )\n\n    const promises = fileIDs.map((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      this.uppy.emit('preprocess-progress', file, {\n        mode: 'indeterminate',\n        message: this.i18n('compressingImages'),\n      })\n\n      if (file.isRemote) {\n        return Promise.resolve()\n      }\n\n      // Some browsers (Firefox) add blobs with empty file type, when files are\n      // added from a folder. Uppy auto-detects type from extension, but leaves the original blob intact.\n      // However, Compressor.js failes when file has no type, so we set it here\n      if (!file.data.type) {\n        file.data = file.data.slice(0, file.data.size, file.type)\n      }\n\n      if (!file.type.startsWith('image/')) {\n        return Promise.resolve()\n      }\n\n      return compressAndApplyResult(file)\n    })\n\n    // Why emit `preprocess-complete` for all files at once, instead of\n    // above when each is processed?\n    // Because it leads to StatusBar showing a weird “upload 6 files” button,\n    // while waiting for all the files to complete pre-processing.\n    await Promise.all(promises)\n\n    this.uppy.emit('compressor:complete', compressedFiles)\n\n    // Only show informer if Compressor mananged to save at least a kilobyte\n    if (totalCompressedSize > 1024) {\n      this.uppy.info(\n        this.i18n('compressedX', {\n          size: prettierBytes(totalCompressedSize),\n        }),\n        'info',\n      )\n    }\n\n    for (const fileID of fileIDs) {\n      const file = this.uppy.getFile(fileID)\n      this.uppy.emit('preprocess-complete', file)\n    }\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.prepareUpload)\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.prepareUpload)\n  }\n}\n"]}