{"version":3,"sources":["CaptureScreen.jsx"],"names":["RecordButton","SubmitButton","StopWatch","StreamStatus","RecorderScreen","Component","componentWillUnmount","onStop","props","render","recording","stream","videoStream","recordedVideo","videoProps","playsinline","muted","autoplay","srcObject","controls","src","videoElement","undefined"],"mappings":";;AAEA;;;;MACOA,Y;;MACAC,Y;;MACAC,S;;MACAC,Y;;AAEP,MAAMC,cAAN,SAA6BC,iBAA7B,CAAuC;AACrCC,EAAAA,oBAAoB,GAAI;AACtB,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKC,KAAxB;AACAD,IAAAA,MAAM;AACP;;AAEDE,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,MAAM,EAAEC,WAArB;AAAkCC,MAAAA;AAAlC,QAAoD,KAAKL,KAA/D;AAEA,UAAMM,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE;AADI,KAAnB,CAHQ,CAOR;;AACA,QAAIL,SAAS,IAAK,CAACG,aAAD,IAAkB,CAACH,SAArC,EAAiD;AAC/CI,MAAAA,UAAU,CAACE,KAAX,GAAmB,IAAnB;AACAF,MAAAA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AACAH,MAAAA,UAAU,CAACI,SAAX,GAAuBN,WAAvB;AACD,KAZO,CAcR;;;AACA,QAAIC,aAAa,IAAI,CAACH,SAAtB,EAAiC;AAC/BI,MAAAA,UAAU,CAACE,KAAX,GAAmB,KAAnB;AACAF,MAAAA,UAAU,CAACK,QAAX,GAAsB,IAAtB;AACAL,MAAAA,UAAU,CAACM,GAAX,GAAiBP,aAAjB,CAH+B,CAK/B;;AACA,UAAI,KAAKQ,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkBH,SAAlB,GAA8BI,SAA9B;AACD;AACF;;AAED,WACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,eAAC,YAAD,EAAkB,KAAKd,KAAvB,CADF,EAGE;AAAO,MAAA,GAAG,EAAEa,YAAY,IAAI;AAAE,aAAKA,YAAL,GAAoBA,YAApB;AAAkC,OAAhE;AAAkE,MAAA,SAAS,EAAC;AAA5E,OAA2GP,UAA3G,EAHF,EAIE,eAAC,SAAD,EAAe,KAAKN,KAApB,CAJF,CADF,EAQE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,eAAC,YAAD,EAAkB,KAAKA,KAAvB,CADF,EAEE,eAAC,YAAD,EAAkB,KAAKA,KAAvB,CAFF,CARF,CADF;AAeD;;AA/CoC;;iBAkDxBJ,c","sourcesContent":["// TODO: rename this file to RecorderScreen.jsx in the next major.\n/* eslint-disable react/jsx-props-no-spreading */\nimport { h, Component } from 'preact'\nimport RecordButton from './RecordButton.jsx'\nimport SubmitButton from './SubmitButton.jsx'\nimport StopWatch from './StopWatch.jsx'\nimport StreamStatus from './StreamStatus.jsx'\n\nclass RecorderScreen extends Component {\n  componentWillUnmount () {\n    const { onStop } = this.props\n    onStop()\n  }\n\n  render () {\n    const { recording, stream: videoStream, recordedVideo } = this.props\n\n    const videoProps = {\n      playsinline: true,\n    }\n\n    // show stream\n    if (recording || (!recordedVideo && !recording)) {\n      videoProps.muted = true\n      videoProps.autoplay = true\n      videoProps.srcObject = videoStream\n    }\n\n    // show preview\n    if (recordedVideo && !recording) {\n      videoProps.muted = false\n      videoProps.controls = true\n      videoProps.src = recordedVideo\n\n      // reset srcObject in dom. If not resetted, stream sticks in element\n      if (this.videoElement) {\n        this.videoElement.srcObject = undefined\n      }\n    }\n\n    return (\n      <div className=\"uppy uppy-ScreenCapture-container\">\n        <div className=\"uppy-ScreenCapture-videoContainer\">\n          <StreamStatus {...this.props} />\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video ref={videoElement => { this.videoElement = videoElement }} className=\"uppy-ScreenCapture-video\" {...videoProps} />\n          <StopWatch {...this.props} />\n        </div>\n\n        <div className=\"uppy-ScreenCapture-buttonContainer\">\n          <RecordButton {...this.props} />\n          <SubmitButton {...this.props} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RecorderScreen\n"]}