{"version":3,"sources":["index.js"],"names":["BasePlugin","packageJson","MiniXHRUpload","isXml","locale","resolveUrl","origin","link","URL","undefined","toString","getXmlValue","source","tagName","start","indexOf","end","slice","length","assertServerError","res","error","Error","message","Object","assign","validateParameters","file","params","valid","url","fields","err","TypeError","name","JSON","stringify","methodIsValid","method","test","defaultGetResponseError","content","xhr","warnedSuccessActionStatus","Symbol","for","AwsS3","constructor","uppy","opts","fileIDs","paramsPromises","create","onremove","id","abort","on","forEach","getFile","emit","getUploadParameters","wrapPromiseFunction","numberOfFiles","Promise","allSettled","map","index","then","headers","xhrOpts","formData","toLowerCase","endpoint","metaFields","keys","setFileState","meta","xhrUpload","uploadFile","catch","reject","finally","off","setCompanionHeaders","companionHeaders","resolve","type","title","defaultLocale","defaultOptions","timeout","limit","bind","i18nInit","RequestClient","RateLimitedQueue","client","companionUrl","filename","metadata","fromEntries","filter","key","query","URLSearchParams","get","install","addPreProcessor","addUploader","defaultGetResponseData","toUpperCase","log","location","responseURL","replace","bucket","etag","xhrOptions","fieldName","responseUrlFieldName","internalRateLimitedQueue","responseType","getResponseData","getResponseError","i18n","uninstall","removePreProcessor","removeUploader","VERSION","version"],"mappings":"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","sourcesContent":["/**\n * This plugin is currently a A Big Hackâ„¢! The core reason for that is how this plugin\n * interacts with Uppy's current pipeline design. The pipeline can handle files in steps,\n * including preprocessing, uploading, and postprocessing steps. This plugin initially\n * was designed to do its work in a preprocessing step, and let XHRUpload deal with the\n * actual file upload as an uploading step. However, Uppy runs steps on all files at once,\n * sequentially: first, all files go through a preprocessing step, then, once they are all\n * done, they go through the uploading step.\n *\n * For S3, this causes severely broken behaviour when users upload many files. The\n * preprocessing step will request S3 upload URLs that are valid for a short time only,\n * but it has to do this for _all_ files, which can take a long time if there are hundreds\n * or even thousands of files. By the time the uploader step starts, the first URLs may\n * already have expired. If not, the uploading might take such a long time that later URLs\n * will expire before some files can be uploaded.\n *\n * The long-term solution to this problem is to change the upload pipeline so that files\n * can be sent to the next step individually. That requires a breaking change, so it is\n * planned for some future Uppy version.\n *\n * In the mean time, this plugin is stuck with a hackier approach: the necessary parts\n * of the XHRUpload implementation were copied into this plugin, as the MiniXHRUpload\n * class, and this plugin calls into it immediately once it receives an upload URL.\n * This isn't as nicely modular as we'd like and requires us to maintain two copies of\n * the XHRUpload code, but at least it's not horrifically broken :)\n */\n\nimport BasePlugin from '@uppy/core/lib/BasePlugin'\nimport { RateLimitedQueue, internalRateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport { RequestClient } from '@uppy/companion-client'\n\nimport packageJson from '../package.json'\nimport MiniXHRUpload from './MiniXHRUpload.js'\nimport isXml from './isXml.js'\nimport locale from './locale.js'\n\nfunction resolveUrl (origin, link) {\n  return new URL(link, origin || undefined).toString()\n}\n\n/**\n * Get the contents of a named tag in an XML source string.\n *\n * @param {string} source - The XML source string.\n * @param {string} tagName - The name of the tag.\n * @returns {string} The contents of the tag, or the empty string if the tag does not exist.\n */\nfunction getXmlValue (source, tagName) {\n  const start = source.indexOf(`<${tagName}>`)\n  const end = source.indexOf(`</${tagName}>`, start)\n  return start !== -1 && end !== -1\n    ? source.slice(start + tagName.length + 2, end)\n    : ''\n}\n\nfunction assertServerError (res) {\n  if (res && res.error) {\n    const error = new Error(res.message)\n    Object.assign(error, res.error)\n    throw error\n  }\n  return res\n}\n\nfunction validateParameters (file, params) {\n  const valid = params != null\n    && typeof params.url === 'string'\n    && (typeof params.fields === 'object' || params.fields == null)\n\n  if (!valid) {\n    const err = new TypeError(`AwsS3: got incorrect result from 'getUploadParameters()' for file '${file.name}', expected an object '{ url, method, fields, headers }' but got '${JSON.stringify(params)}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`)\n    throw err\n  }\n\n  const methodIsValid = params.method == null || /^p(u|os)t$/i.test(params.method)\n\n  if (!methodIsValid) {\n    const err = new TypeError(`AwsS3: got incorrect method from 'getUploadParameters()' for file '${file.name}', expected  'put' or 'post' but got '${params.method}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`)\n    throw err\n  }\n}\n\n// Get the error data from a failed XMLHttpRequest instance.\n// `content` is the S3 response as a string.\n// `xhr` is the XMLHttpRequest instance.\nfunction defaultGetResponseError (content, xhr) {\n  // If no response, we don't have a specific error message, use the default.\n  if (!isXml(content, xhr)) {\n    return undefined\n  }\n  const error = getXmlValue(content, 'Message')\n  return new Error(error)\n}\n\n// warning deduplication flag: see `getResponseData()` XHRUpload option definition\nlet warnedSuccessActionStatus = false\n\nexport default class AwsS3 extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #client\n\n  #requests\n\n  #uploader\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3'\n    this.title = 'AWS S3'\n\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      metaFields: [], // have to opt in\n      getUploadParameters: this.getUploadParameters.bind(this),\n      companionHeaders: {},\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload\n    this.i18nInit()\n\n    this.#client = new RequestClient(uppy, opts)\n    this.#requests = new RateLimitedQueue(this.opts.limit)\n  }\n\n  [Symbol.for('uppy test: getClient')] () { return this.#client }\n\n  // TODO: remove getter and setter for #client on the next major release\n  get client () { return this.#client }\n\n  set client (client) { this.#client = client }\n\n  getUploadParameters (file) {\n    if (!this.opts.companionUrl) {\n      throw new Error('Expected a `companionUrl` option containing a Companion address.')\n    }\n\n    const filename = file.meta.name\n    const { type } = file.meta\n    const metadata = Object.fromEntries(\n      this.opts.metaFields\n        .filter(key => file.meta[key] != null)\n        .map(key => [`metadata[${key}]`, file.meta[key].toString()]),\n    )\n\n    const query = new URLSearchParams({ filename, type, ...metadata })\n    return this.#client.get(`s3/params?${query}`)\n      .then(assertServerError)\n  }\n\n  #handleUpload = (fileIDs) => {\n    /**\n     * keep track of `getUploadParameters()` responses\n     * so we can cancel the calls individually using just a file ID\n     *\n     * @type {Record<string, import('@uppy/utils/lib/RateLimitedQueue').AbortablePromise<unknown>>}\n     */\n    const paramsPromises = Object.create(null)\n\n    function onremove (file) {\n      const { id } = file\n      paramsPromises[id]?.abort()\n    }\n    this.uppy.on('file-removed', onremove)\n\n    fileIDs.forEach((id) => {\n      const file = this.uppy.getFile(id)\n      this.uppy.emit('upload-started', file)\n    })\n\n    const getUploadParameters = this.#requests.wrapPromiseFunction((file) => {\n      return this.opts.getUploadParameters(file)\n    })\n\n    const numberOfFiles = fileIDs.length\n\n    return Promise.allSettled(fileIDs.map((id, index) => {\n      paramsPromises[id] = getUploadParameters(this.uppy.getFile(id))\n      return paramsPromises[id].then((params) => {\n        delete paramsPromises[id]\n\n        const file = this.uppy.getFile(id)\n        validateParameters(file, params)\n\n        const {\n          method = 'post',\n          url,\n          fields,\n          headers,\n        } = params\n        const xhrOpts = {\n          method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          metaFields: fields ? Object.keys(fields) : [],\n        }\n\n        if (headers) {\n          xhrOpts.headers = headers\n        }\n\n        this.uppy.setFileState(file.id, {\n          meta: { ...file.meta, ...fields },\n          xhrUpload: xhrOpts,\n        })\n\n        return this.#uploader.uploadFile(file.id, index, numberOfFiles)\n      }).catch((error) => {\n        delete paramsPromises[id]\n\n        const file = this.uppy.getFile(id)\n        this.uppy.emit('upload-error', file, error)\n        return Promise.reject(error)\n      })\n    })).finally(() => {\n      // cleanup.\n      this.uppy.off('file-removed', onremove)\n    })\n  }\n\n  #setCompanionHeaders = () => {\n    this.#client.setCompanionHeaders(this.opts.companionHeaders)\n    return Promise.resolve()\n  }\n\n  install () {\n    const { uppy } = this\n    uppy.addPreProcessor(this.#setCompanionHeaders)\n    uppy.addUploader(this.#handleUpload)\n\n    // Get the response data from a successful XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n    function defaultGetResponseData (content, xhr) {\n      const opts = this\n\n      // If no response, we've hopefully done a PUT request to the file\n      // in the bucket on its full URL.\n      if (!isXml(content, xhr)) {\n        if (opts.method.toUpperCase() === 'POST') {\n          if (!warnedSuccessActionStatus) {\n            uppy.log('[AwsS3] No response data found, make sure to set the success_action_status AWS SDK option to 201. See https://uppy.io/docs/aws-s3/#POST-Uploads', 'warning')\n            warnedSuccessActionStatus = true\n          }\n          // The responseURL won't contain the object key. Give up.\n          return { location: null }\n        }\n\n        // responseURL is not available in older browsers.\n        if (!xhr.responseURL) {\n          return { location: null }\n        }\n\n        // Trim the query string because it's going to be a bunch of presign\n        // parameters for a PUT requestâ€”doing a GET request with those will\n        // always result in an error\n        return { location: xhr.responseURL.replace(/\\?.*$/, '') }\n      }\n\n      return {\n        // Some S3 alternatives do not reply with an absolute URL.\n        // Eg DigitalOcean Spaces uses /$bucketName/xyz\n        location: resolveUrl(xhr.responseURL, getXmlValue(content, 'Location')),\n        bucket: getXmlValue(content, 'Bucket'),\n        key: getXmlValue(content, 'Key'),\n        etag: getXmlValue(content, 'ETag'),\n      }\n    }\n\n    const xhrOptions = {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      // Share the rate limiting queue with XHRUpload.\n      [internalRateLimitedQueue]: this.#requests,\n      responseType: 'text',\n      getResponseData: this.opts.getResponseData || defaultGetResponseData,\n      getResponseError: defaultGetResponseError,\n    }\n\n    // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload\n    xhrOptions.i18n = this.i18n\n\n    // Revert to `uppy.use(XHRUpload)` once the big comment block at the top of\n    // this file is solved\n    this.#uploader = new MiniXHRUpload(uppy, xhrOptions)\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.#setCompanionHeaders)\n    this.uppy.removeUploader(this.#handleUpload)\n  }\n}\n"]}