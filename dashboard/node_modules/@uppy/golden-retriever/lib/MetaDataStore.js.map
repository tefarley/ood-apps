{"version":3,"sources":["MetaDataStore.js"],"names":["findUppyInstances","instances","i","localStorage","length","key","test","push","slice","maybeParse","str","JSON","parse","err","cleanedUp","MetaDataStore","constructor","opts","expires","name","storeName","cleanup","load","savedState","getItem","data","metadata","save","Date","now","state","stringify","setItem","instanceID","removeItem","instanceIDs","forEach","id","obj"],"mappings":"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","sourcesContent":["/**\n * Get uppy instance IDs for which state is stored.\n */\nfunction findUppyInstances () {\n  const instances = []\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i)\n    if (/^uppyState:/.test(key)) {\n      instances.push(key.slice('uppyState:'.length))\n    }\n  }\n  return instances\n}\n\n/**\n * Try to JSON-parse a string, return null on failure.\n */\nfunction maybeParse (str) {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    return null\n  }\n}\n\nlet cleanedUp = false\nexport default class MetaDataStore {\n  constructor (opts) {\n    this.opts = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      ...opts,\n    }\n    this.name = `uppyState:${opts.storeName}`\n\n    if (!cleanedUp) {\n      cleanedUp = true\n      MetaDataStore.cleanup()\n    }\n  }\n\n  /**\n   *\n   */\n  load () {\n    const savedState = localStorage.getItem(this.name)\n    if (!savedState) return null\n    const data = maybeParse(savedState)\n    if (!data) return null\n\n    // Upgrade pre-0.20.0 uppyState: it used to be just a flat object,\n    // without `expires`.\n    if (!data.metadata) {\n      this.save(data)\n      return data\n    }\n\n    return data.metadata\n  }\n\n  save (metadata) {\n    const expires = Date.now() + this.opts.expires\n    const state = JSON.stringify({\n      metadata,\n      expires,\n    })\n    localStorage.setItem(this.name, state)\n  }\n\n  /**\n   * Remove all expired state.\n   */\n  static cleanup (instanceID) {\n    if (instanceID) {\n      localStorage.removeItem(`uppyState:${instanceID}`)\n      return\n    }\n\n    const instanceIDs = findUppyInstances()\n    const now = Date.now()\n    instanceIDs.forEach((id) => {\n      const data = localStorage.getItem(`uppyState:${id}`)\n      if (!data) return\n      const obj = maybeParse(data)\n      if (!obj) return\n\n      if (obj.expires && obj.expires < now) {\n        localStorage.removeItem(`uppyState:${id}`)\n      }\n    })\n  }\n}\n"]}