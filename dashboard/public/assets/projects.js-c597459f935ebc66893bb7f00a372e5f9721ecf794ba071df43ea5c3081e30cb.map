{
  "version": 3,
  "sources": ["../../javascript/packs/config.js", "../../javascript/packs/utils.js", "../../javascript/packs/projects.js"],
  "sourcesContent": ["'use strict;'\n\nconst CONFIG_ID = 'ood_config'\n\nfunction configData() {\n  return document.getElementById(CONFIG_ID).dataset;\n}\n\nfunction maxFileSize () {\n  const cfgData = configData();\n\n  // Check if cfgData['maxFileSize'] is just empty string, \n  // if so set default of maxFileUpload=10737420000 bytes.\n  if (cfgData['maxFileSize'].length == 0) {\n    return parseInt(10737420000, 10);\n  }\n  else {\n    const maxFileSize = cfgData['maxFileSize'];\n    return parseInt(maxFileSize, 10);\n  }\n}\n\nfunction transfersPath() {\n  const cfgData = configData();\n  const transfersPath = cfgData['transfersPath'];\n\n  return transfersPath;\n}\n\nfunction jobsInfoPath(){\n  const cfgData = configData();\n  return cfgData['jobsInfoPath'];\n}\n\nfunction csrfToken() {\n  const csrf_token = document.querySelector('meta[name=\"csrf-token\"]').content;\n\n  return csrf_token;\n}\n\nfunction uppyLocale() {\n  const cfgData = configData();\n  return JSON.parse(cfgData['uppyLocale']);\n}\n\nexport {\n  maxFileSize,\n  transfersPath,\n  jobsInfoPath,\n  csrfToken,\n  uppyLocale\n};\n", "\nexport function cssBadgeForState(state){\n  switch (state) {\n    case 'completed':\n      return 'badge-success';\n    case 'running':\n      return 'badge-primary'\n    case 'queued':\n      return 'badge-info';\n    case 'queued_held':\n      return 'badge-warning';\n    case 'suspended':\n      return 'badge-warning';\n    default:\n      return 'badge-warning';\n  }\n}\n\nexport function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n", "import { jobsInfoPath } from './config.js';\nimport { cssBadgeForState } from './utils.js';\n\n\njQuery(function() {\n  $('[data-job-poller=\"true\"]').each((_index, ele) => {\n    pollForJobInfo(ele);\n  });\n});\n\nfunction pollForJobInfo(element) {\n\n  const jobId = element.dataset['jobId'];\n  const jobCluster = element.dataset['jobCluster'];\n  const url = `${jobsInfoPath()}/${jobCluster}/${jobId}`;\n\n  if(jobId === \"\" || jobCluster === \"\") {\n    element.innerHTML = \"\";\n    return;\n  }\n\n  fetch(url, { headers: { 'Accept': 'application/json' }, cache: 'no-store' })\n    .then((response) => { \n      if (!response.ok) {\n        if(response.status === 404) {\n          // TODO\n        } else{\n          throw new Error('Not 2xx response while looking for job', { cause: response });\n        }\n      } else {\n        return response.json();\n      }\n    })\n    .then((data) => {\n      const state = data['state'];\n      element.innerHTML = jobInfoDiv(jobId, state);\n      if(state !== 'completed') {\n        // keep going\n        setTimeout(pollForJobInfo, 10000, element);\n      }\n    })\n    .catch((error) => { \n      // TODO, show an error in the HTML\n     });\n}\n\nfunction jobInfoDiv(jobId, state) {\n  return `<div>\n            <span class=\"mr-2\">${jobId}</span>\n            <span class=\"badge ${cssBadgeForState(state)}\">${state.toUpperCase()}</span>\n          </div>`;\n}"],
  "mappings": "AAEA,IAAMA,EAAY,aAElB,SAASC,GAAa,CACpB,OAAO,SAAS,eAAeD,CAAS,EAAE,OAC5C,CAuBA,SAASE,GAAc,CAErB,OADgBC,EAAW,EACZ,YACjB,CC/BO,SAASC,EAAiBC,EAAM,CACrC,OAAQA,OACD,YACH,MAAO,oBACJ,UACH,MAAO,oBACJ,SACH,MAAO,iBACJ,cACH,MAAO,oBACJ,YACH,MAAO,wBAEP,MAAO,gBAEb,CCZA,OAAO,UAAW,CAChB,EAAE,0BAA0B,EAAE,KAAK,CAACC,EAAQC,IAAQ,CAClDC,EAAeD,CAAG,CACpB,CAAC,CACH,CAAC,EAED,SAASC,EAAeC,EAAS,CAE/B,IAAMC,EAAQD,EAAQ,QAAQ,MACxBE,EAAaF,EAAQ,QAAQ,WAC7BG,EAAM,GAAGC,EAAa,KAAKF,KAAcD,IAE/C,GAAGA,IAAU,IAAMC,IAAe,GAAI,CACpCF,EAAQ,UAAY,GACpB,MACF,CAEA,MAAMG,EAAK,CAAE,QAAS,CAAE,OAAU,kBAAmB,EAAG,MAAO,UAAW,CAAC,EACxE,KAAME,GAAa,CAClB,GAAKA,EAAS,GAOZ,OAAOA,EAAS,KAAK,EANrB,GAAGA,EAAS,SAAW,IAGrB,MAAM,IAAI,MAAM,yCAA0C,CAAE,MAAOA,CAAS,CAAC,CAKnF,CAAC,EACA,KAAMC,GAAS,CACd,IAAMC,EAAQD,EAAK,MACnBN,EAAQ,UAAYQ,EAAWP,EAAOM,CAAK,EACxCA,IAAU,aAEX,WAAWR,EAAgB,IAAOC,CAAO,CAE7C,CAAC,EACA,MAAOS,GAAU,CAEjB,CAAC,CACN,CAEA,SAASD,EAAWP,EAAOM,EAAO,CAChC,MAAO;AAAA,iCACwBN;AAAA,iCACAS,EAAiBH,CAAK,MAAMA,EAAM,YAAY;AAAA,iBAE/E",
  "names": ["CONFIG_ID", "configData", "jobsInfoPath", "configData", "cssBadgeForState", "state", "_index", "ele", "pollForJobInfo", "element", "jobId", "jobCluster", "url", "jobsInfoPath", "response", "data", "state", "jobInfoDiv", "error", "cssBadgeForState"]
}
