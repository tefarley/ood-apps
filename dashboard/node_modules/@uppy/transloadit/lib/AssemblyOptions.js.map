{"version":3,"sources":["AssemblyOptions.js"],"names":["ErrorWithCause","validateParams","params","Error","JSON","parse","err","cause","auth","key","dedupe","list","dedupeMap","Object","create","fileIDs","options","filter","Boolean","id","stringify","fileIDArrays","push","values","map","flat","AssemblyOptions","constructor","files","opts","build","length","Promise","all","file","then","alwaysRunAssembly","assemblyOptions","getAssemblyOptions","undefined","Array","isArray","fields","fromEntries","fieldName","meta"],"mappings":"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","sourcesContent":["import ErrorWithCause from '@uppy/utils/lib/ErrorWithCause'\n\n/**\n * Check that Assembly parameters are present and include all required fields.\n */\nfunction validateParams (params) {\n  if (params == null) {\n    throw new Error('Transloadit: The `params` option is required.')\n  }\n\n  if (typeof params === 'string') {\n    try {\n      // eslint-disable-next-line no-param-reassign\n      params = JSON.parse(params)\n    } catch (err) {\n      // Tell the user that this is not an Uppy bug!\n      throw new ErrorWithCause('Transloadit: The `params` option is a malformed JSON string.', { cause: err })\n    }\n  }\n\n  if (!params.auth || !params.auth.key) {\n    throw new Error('Transloadit: The `params.auth.key` option is required. '\n      + 'You can find your Transloadit API key at https://transloadit.com/c/template-credentials')\n  }\n}\n\n/**\n * Combine Assemblies with the same options into a single Assembly for all the\n * relevant files.\n */\nfunction dedupe (list) {\n  const dedupeMap = Object.create(null)\n  for (const { fileIDs, options } of list.filter(Boolean)) {\n    const id = JSON.stringify(options)\n    if (id in dedupeMap) {\n      dedupeMap[id].fileIDArrays.push(fileIDs)\n    } else {\n      dedupeMap[id] = {\n        options,\n        fileIDArrays: [fileIDs],\n      }\n    }\n  }\n\n  return Object.values(dedupeMap).map(({ options, fileIDArrays }) => ({\n    options,\n    fileIDs: fileIDArrays.flat(1),\n  }))\n}\n\n/**\n * Turn Transloadit plugin options and a list of files into a list of Assembly\n * options.\n */\nclass AssemblyOptions {\n  constructor (files, opts) {\n    this.files = files\n    this.opts = opts\n  }\n\n  /**\n   * Get Assembly options for a file.\n   */\n  async #getAssemblyOptions (file) {\n    if (file == null) return undefined\n\n    const options = this.opts\n    const assemblyOptions = await options.getAssemblyOptions(file, options)\n\n    // We check if the file is present here again, because it could had been\n    // removed during the await, e.g. if the user hit cancel while we were\n    // waiting for the options.\n    if (file == null) return undefined\n\n    if (Array.isArray(assemblyOptions.fields)) {\n      assemblyOptions.fields = Object.fromEntries(\n        assemblyOptions.fields.map((fieldName) => [fieldName, file.meta[fieldName]]),\n      )\n    } else if (assemblyOptions.fields == null) {\n      assemblyOptions.fields = {}\n    }\n\n    validateParams(assemblyOptions.params)\n\n    return {\n      fileIDs: [file.id],\n      options: assemblyOptions,\n    }\n  }\n\n  /**\n   * Generate a set of Assemblies that will handle the upload.\n   * Returns a Promise for an object with keys:\n   *  - fileIDs - an array of file IDs to add to this Assembly\n   *  - options - Assembly options\n   */\n  async build () {\n    const options = this.opts\n\n    if (this.files.length > 0) {\n      return Promise.all(\n        this.files.map((file) => this.#getAssemblyOptions(file)),\n      ).then(dedupe)\n    }\n\n    if (options.alwaysRunAssembly) {\n      // No files, just generate one Assembly\n      const assemblyOptions = await options.getAssemblyOptions(null, options)\n\n      validateParams(assemblyOptions.params)\n      return [{\n        fileIDs: this.files.map((file) => file.id),\n        options: assemblyOptions,\n      }]\n    }\n\n    // If there are no files and we do not `alwaysRunAssembly`,\n    // don't do anything.\n    return []\n  }\n}\n\nexport default AssemblyOptions\nexport { validateParams }\n\n// Backward compatibility: we want `validateParams` to keep being a static\n// method of `AssemblyOptions` to avoid a breaking change.\nAssemblyOptions.validateParams = validateParams // TODO: remove this line on the next major\n"]}