{"version":3,"sources":["Audio.jsx"],"names":["getFileTypeExtension","supportsMediaRecorder","RecordingScreen","PermissionsScreen","locale","packageJson","Audio","UIPlugin","constructor","uppy","opts","options","Promise","reject","Error","then","hasAudio","setPluginState","getUserMedia","audio","stream","currentDeviceId","tracks","getAudioTracks","deviceId","getSettings","forEach","track","audioReady","catch","err","cameraError","info","message","MediaRecorder","stoppingBecauseOfMaxSize","addEventListener","event","push","data","restrictions","length","maxFileSize","totalSize","reduce","acc","chunk","size","averageChunkSize","expectedEndChunkSize","maxSize","Math","max","i18n","start","recordingLengthTimer","setInterval","currentRecordingLength","getPluginState","recordingLengthSeconds","isRecording","stopped","resolve","stop","clearInterval","file","recordedAudio","URL","createObjectURL","isRestriction","log","error","addFile","audioTracks","once","enumerateDevices","devices","audioSources","filter","device","kind","navigator","mediaDevices","id","type","icon","defaultLocale","i18nInit","title","render","audioState","showAudioSourceDropdown","install","target","mount","ondevicechange","restartStream","audioSource","uninstall","unmount","some","mimeType","find","blob","fileExtension","name","Date","now","Blob","source","VERSION","version"],"mappings":"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","sourcesContent":["import { h } from 'preact'\n\nimport { UIPlugin } from '@uppy/core'\n\nimport getFileTypeExtension from '@uppy/utils/lib/getFileTypeExtension'\nimport supportsMediaRecorder from './supportsMediaRecorder.js'\nimport RecordingScreen from './RecordingScreen.jsx'\nimport PermissionsScreen from './PermissionsScreen.jsx'\nimport locale from './locale.js'\n\nimport packageJson from '../package.json'\n\n/**\n * Audio recording plugin\n */\nexport default class Audio extends UIPlugin {\n  static VERSION = packageJson.version\n\n  #stream = null\n\n  #audioActive = false\n\n  #recordingChunks = null\n\n  #recorder = null\n\n  #capturedMediaFile = null\n\n  #mediaDevices = null\n\n  #supportsUserMedia = null\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.#mediaDevices = navigator.mediaDevices\n    this.#supportsUserMedia = this.#mediaDevices != null\n    this.id = this.opts.id || 'Audio'\n    this.type = 'acquirer'\n    this.icon = () => (\n      <svg aria-hidden=\"true\" focusable=\"false\" width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\">\n        <g fill=\"none\" fill-rule=\"evenodd\">\n          <rect fill=\"#9B59B6\" width=\"32\" height=\"32\" rx=\"16\" />\n          <path d=\"M16 20c-2.21 0-4-1.71-4-3.818V9.818C12 7.71 13.79 6 16 6s4 1.71 4 3.818v6.364C20 18.29 18.21 20 16 20zm-6.364-7h.637c.351 0 .636.29.636.65v1.95c0 3.039 2.565 5.477 5.6 5.175 2.645-.264 4.582-2.692 4.582-5.407V13.65c0-.36.285-.65.636-.65h.637c.351 0 .636.29.636.65v1.631c0 3.642-2.544 6.888-6.045 7.382v1.387h2.227c.351 0 .636.29.636.65v.65c0 .36-.285.65-.636.65h-6.364a.643.643 0 0 1-.636-.65v-.65c0-.36.285-.65.636-.65h2.227v-1.372C11.637 22.2 9 19.212 9 15.6v-1.95c0-.36.285-.65.636-.65z\" fill=\"#FFF\" fill-rule=\"nonzero\" />\n        </g>\n      </svg>\n    )\n\n    this.defaultLocale = locale\n\n    this.opts = { ...opts }\n\n    this.i18nInit()\n    this.title = this.i18n('pluginNameAudio')\n\n    this.setPluginState({\n      hasAudio: false,\n      audioReady: false,\n      cameraError: null,\n      recordingLengthSeconds: 0,\n      audioSources: [],\n      currentDeviceId: null,\n    })\n  }\n\n  #hasAudioCheck () {\n    if (!this.#mediaDevices) {\n      return Promise.resolve(false)\n    }\n\n    return this.#mediaDevices.enumerateDevices().then(devices => {\n      return devices.some(device => device.kind === 'audioinput')\n    })\n  }\n\n  // eslint-disable-next-line consistent-return\n  #start = (options = null) => {\n    if (!this.#supportsUserMedia) {\n      return Promise.reject(new Error('Microphone access not supported'))\n    }\n\n    this.#audioActive = true\n\n    this.#hasAudioCheck().then(hasAudio => {\n      this.setPluginState({\n        hasAudio,\n      })\n\n      // ask user for access to their camera\n      return this.#mediaDevices.getUserMedia({ audio: true })\n        .then((stream) => {\n          this.#stream = stream\n\n          let currentDeviceId = null\n          const tracks = stream.getAudioTracks()\n\n          if (!options || !options.deviceId) {\n            currentDeviceId = tracks[0].getSettings().deviceId\n          } else {\n            tracks.forEach((track) => {\n              if (track.getSettings().deviceId === options.deviceId) {\n                currentDeviceId = track.getSettings().deviceId\n              }\n            })\n          }\n\n          // Update the sources now, so we can access the names.\n          this.#updateSources()\n\n          this.setPluginState({\n            currentDeviceId,\n            audioReady: true,\n          })\n        })\n        .catch((err) => {\n          this.setPluginState({\n            audioReady: false,\n            cameraError: err,\n          })\n          this.uppy.info(err.message, 'error')\n        })\n    })\n  }\n\n  #startRecording = () => {\n    // only used if supportsMediaRecorder() returned true\n    // eslint-disable-next-line compat/compat\n    this.#recorder = new MediaRecorder(this.#stream)\n    this.#recordingChunks = []\n    let stoppingBecauseOfMaxSize = false\n    this.#recorder.addEventListener('dataavailable', (event) => {\n      this.#recordingChunks.push(event.data)\n\n      const { restrictions } = this.uppy.opts\n      if (this.#recordingChunks.length > 1\n          && restrictions.maxFileSize != null\n          && !stoppingBecauseOfMaxSize) {\n        const totalSize = this.#recordingChunks.reduce((acc, chunk) => acc + chunk.size, 0)\n        // Exclude the initial chunk from the average size calculation because it is likely to be a very small outlier\n        const averageChunkSize = (totalSize - this.#recordingChunks[0].size) / (this.#recordingChunks.length - 1)\n        const expectedEndChunkSize = averageChunkSize * 3\n        const maxSize = Math.max(0, restrictions.maxFileSize - expectedEndChunkSize)\n\n        if (totalSize > maxSize) {\n          stoppingBecauseOfMaxSize = true\n          this.uppy.info(this.i18n('recordingStoppedMaxSize'), 'warning', 4000)\n          this.#stopRecording()\n        }\n      }\n    })\n\n    // use a \"time slice\" of 500ms: ondataavailable will be called each 500ms\n    // smaller time slices mean we can more accurately check the max file size restriction\n    this.#recorder.start(500)\n\n    // Start the recordingLengthTimer if we are showing the recording length.\n    this.recordingLengthTimer = setInterval(() => {\n      const currentRecordingLength = this.getPluginState().recordingLengthSeconds\n      this.setPluginState({ recordingLengthSeconds: currentRecordingLength + 1 })\n    }, 1000)\n\n    this.setPluginState({\n      isRecording: true,\n    })\n  }\n\n  #stopRecording = () => {\n    const stopped = new Promise((resolve) => {\n      this.#recorder.addEventListener('stop', () => {\n        resolve()\n      })\n      this.#recorder.stop()\n\n      clearInterval(this.recordingLengthTimer)\n      this.setPluginState({ recordingLengthSeconds: 0 })\n    })\n\n    return stopped.then(() => {\n      this.setPluginState({\n        isRecording: false,\n      })\n      return this.#getAudio()\n    }).then((file) => {\n      try {\n        this.#capturedMediaFile = file\n        // create object url for capture result preview\n        this.setPluginState({\n          recordedAudio: URL.createObjectURL(file.data),\n        })\n      } catch (err) {\n        // Logging the error, exept restrictions, which is handled in Core\n        if (!err.isRestriction) {\n          this.uppy.log(err)\n        }\n      }\n    }).then(() => {\n      this.#recordingChunks = null\n      this.#recorder = null\n    }, (error) => {\n      this.#recordingChunks = null\n      this.#recorder = null\n      throw error\n    })\n  }\n\n  #discardRecordedAudio = () => {\n    this.setPluginState({ recordedAudio: null })\n    this.#capturedMediaFile = null\n  }\n\n  #submit = () => {\n    try {\n      if (this.#capturedMediaFile) {\n        this.uppy.addFile(this.#capturedMediaFile)\n      }\n    } catch (err) {\n      // Logging the error, exept restrictions, which is handled in Core\n      if (!err.isRestriction) {\n        this.uppy.log(err, 'error')\n      }\n    }\n  }\n\n  #stop = async () => {\n    if (this.#stream) {\n      const audioTracks = this.#stream.getAudioTracks()\n      audioTracks.forEach((track) => track.stop())\n    }\n\n    if (this.#recorder) {\n      await new Promise((resolve) => {\n        this.#recorder.addEventListener('stop', resolve, { once: true })\n        this.#recorder.stop()\n\n        clearInterval(this.recordingLengthTimer)\n      })\n    }\n\n    this.#recordingChunks = null\n    this.#recorder = null\n    this.#audioActive = false\n    this.#stream = null\n\n    this.setPluginState({\n      recordedAudio: null,\n      isRecording: false,\n      recordingLengthSeconds: 0,\n    })\n  }\n\n  #getAudio () {\n    // Sometimes in iOS Safari, Blobs (especially the first Blob in the recordingChunks Array)\n    // have empty 'type' attributes (e.g. '') so we need to find a Blob that has a defined 'type'\n    // attribute in order to determine the correct MIME type.\n    const mimeType = this.#recordingChunks.find(blob => blob.type?.length > 0).type\n\n    const fileExtension = getFileTypeExtension(mimeType)\n\n    if (!fileExtension) {\n      return Promise.reject(new Error(`Could not retrieve recording: Unsupported media type \"${mimeType}\"`))\n    }\n\n    const name = `audio-${Date.now()}.${fileExtension}`\n    const blob = new Blob(this.#recordingChunks, { type: mimeType })\n    const file = {\n      source: this.id,\n      name,\n      data: new Blob([blob], { type: mimeType }),\n      type: mimeType,\n    }\n\n    return Promise.resolve(file)\n  }\n\n  #changeSource = (deviceId) => {\n    this.#stop()\n    this.#start({ deviceId })\n  }\n\n  #updateSources = () => {\n    this.#mediaDevices.enumerateDevices().then(devices => {\n      this.setPluginState({\n        audioSources: devices.filter((device) => device.kind === 'audioinput'),\n      })\n    })\n  }\n\n  render () {\n    if (!this.#audioActive) {\n      this.#start()\n    }\n\n    const audioState = this.getPluginState()\n\n    if (!audioState.audioReady || !audioState.hasAudio) {\n      return (\n        <PermissionsScreen\n          icon={this.icon}\n          i18n={this.i18n}\n          hasAudio={audioState.hasAudio}\n        />\n      )\n    }\n\n    return (\n      <RecordingScreen\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...audioState}\n        audioActive={this.#audioActive}\n        onChangeSource={this.#changeSource}\n        onStartRecording={this.#startRecording}\n        onStopRecording={this.#stopRecording}\n        onDiscardRecordedAudio={this.#discardRecordedAudio}\n        onSubmit={this.#submit}\n        onStop={this.#stop}\n        i18n={this.i18n}\n        showAudioSourceDropdown={this.opts.showAudioSourceDropdown}\n        supportsRecording={supportsMediaRecorder()}\n        recording={audioState.isRecording}\n        stream={this.#stream}\n      />\n    )\n  }\n\n  install () {\n    this.setPluginState({\n      audioReady: false,\n      recordingLengthSeconds: 0,\n    })\n\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n\n    if (this.#mediaDevices) {\n      this.#updateSources()\n\n      this.#mediaDevices.ondevicechange = () => {\n        this.#updateSources()\n\n        if (this.#stream) {\n          let restartStream = true\n\n          const { audioSources, currentDeviceId } = this.getPluginState()\n\n          audioSources.forEach((audioSource) => {\n            if (currentDeviceId === audioSource.deviceId) {\n              restartStream = false\n            }\n          })\n\n          if (restartStream) {\n            this.#stop()\n            this.#start()\n          }\n        }\n      }\n    }\n  }\n\n  uninstall () {\n    if (this.#stream) {\n      this.#stop()\n    }\n\n    this.unmount()\n  }\n}\n"]}