{"version":3,"sources":["MultipartUploader.js"],"names":["delay","MB","defaultOptions","limit","retryDelays","getChunkSize","file","Math","ceil","size","onStart","onProgress","onPartComplete","onSuccess","onError","err","ensureInt","value","parseInt","TypeError","MultipartUploader","constructor","options","abortController","AbortController","key","uploadId","parts","createdPromise","Promise","reject","isPaused","partsInProgress","chunks","chunkState","catch","start","pause","abort","opts","undefined","really","signal","aborted","desiredChunkSize","minChunkSize","max","chunkSize","push","i","end","min","slice","map","uploaded","busy","done","resolve","then","createMultipartUpload","result","valid","listParts","forEach","part","PartNumber","Size","etag","ETag","some","p","every","state","need","completeChunks","filter","length","remainingChunks","minNeeded","candidates","index","partNumber","prePreparedPart","url","presignedUrls","headers","before","attempt","after","shouldRetry","source","status","doAttempt","retryAttempt","prepareUploadParts","partNumbers","reduce","candidate","sent","totalUploaded","n","c","body","defer","promise","xhr","XMLHttpRequest","open","Object","keys","setRequestHeader","responseType","cleanup","removeEventListener","onabort","addEventListener","upload","ev","lengthComputable","loaded","total","target","error","Error","getResponseHeader","send","sort","a","b","completeMultipartUpload","abortMultipartUpload","name"],"mappings":"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","sourcesContent":["import { AbortController, createAbortError } from '@uppy/utils/lib/AbortController'\nimport delay from '@uppy/utils/lib/delay'\n\nconst MB = 1024 * 1024\n\nconst defaultOptions = {\n  limit: 1,\n  retryDelays: [0, 1000, 3000, 5000],\n  getChunkSize (file) {\n    return Math.ceil(file.size / 10000)\n  },\n  onStart () {},\n  onProgress () {},\n  onPartComplete () {},\n  onSuccess () {},\n  onError (err) {\n    throw err\n  },\n}\n\nfunction ensureInt (value) {\n  if (typeof value === 'string') {\n    return parseInt(value, 10)\n  }\n  if (typeof value === 'number') {\n    return value\n  }\n  throw new TypeError('Expected a number')\n}\n\nclass MultipartUploader {\n  constructor (file, options) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n    // Use default `getChunkSize` if it was null or something\n    if (!this.options.getChunkSize) {\n      this.options.getChunkSize = defaultOptions.getChunkSize\n    }\n\n    this.file = file\n    this.abortController = new AbortController()\n\n    this.key = this.options.key || null\n    this.uploadId = this.options.uploadId || null\n    this.parts = []\n\n    // Do `this.createdPromise.then(OP)` to execute an operation `OP` _only_ if the\n    // upload was created already. That also ensures that the sequencing is right\n    // (so the `OP` definitely happens if the upload is created).\n    //\n    // This mostly exists to make `#abortUpload` work well: only sending the abort request if\n    // the upload was already created, and if the createMultipartUpload request is still in flight,\n    // aborting it immediately after it finishes.\n    this.createdPromise = Promise.reject() // eslint-disable-line prefer-promise-reject-errors\n    this.isPaused = false\n    this.partsInProgress = 0\n    this.chunks = null\n    this.chunkState = null\n\n    this.#initChunks()\n\n    this.createdPromise.catch(() => {}) // silence uncaught rejection warning\n  }\n\n  /**\n   * Was this upload aborted?\n   *\n   * If yes, we may need to throw an AbortError.\n   *\n   * @returns {boolean}\n   */\n  #aborted () {\n    return this.abortController.signal.aborted\n  }\n\n  #initChunks () {\n    const chunks = []\n    const desiredChunkSize = this.options.getChunkSize(this.file)\n    // at least 5MB per request, at most 10k requests\n    const minChunkSize = Math.max(5 * MB, Math.ceil(this.file.size / 10000))\n    const chunkSize = Math.max(desiredChunkSize, minChunkSize)\n\n    // Upload zero-sized files in one zero-sized chunk\n    if (this.file.size === 0) {\n      chunks.push(this.file)\n    } else {\n      for (let i = 0; i < this.file.size; i += chunkSize) {\n        const end = Math.min(this.file.size, i + chunkSize)\n        chunks.push(this.file.slice(i, end))\n      }\n    }\n\n    this.chunks = chunks\n    this.chunkState = chunks.map(() => ({\n      uploaded: 0,\n      busy: false,\n      done: false,\n    }))\n  }\n\n  #createUpload () {\n    this.createdPromise = Promise.resolve().then(() => this.options.createMultipartUpload())\n    return this.createdPromise.then((result) => {\n      if (this.#aborted()) throw createAbortError()\n\n      const valid = typeof result === 'object' && result\n        && typeof result.uploadId === 'string'\n        && typeof result.key === 'string'\n      if (!valid) {\n        throw new TypeError('AwsS3/Multipart: Got incorrect result from `createMultipartUpload()`, expected an object `{ uploadId, key }`.')\n      }\n\n      this.key = result.key\n      this.uploadId = result.uploadId\n\n      this.options.onStart(result)\n      this.#uploadParts()\n    }).catch((err) => {\n      this.#onError(err)\n    })\n  }\n\n  async #resumeUpload () {\n    try {\n      const parts = await this.options.listParts({\n        uploadId: this.uploadId,\n        key: this.key,\n      })\n      if (this.#aborted()) throw createAbortError()\n\n      parts.forEach((part) => {\n        const i = part.PartNumber - 1\n\n        this.chunkState[i] = {\n          uploaded: ensureInt(part.Size),\n          etag: part.ETag,\n          done: true,\n        }\n\n        // Only add if we did not yet know about this part.\n        if (!this.parts.some((p) => p.PartNumber === part.PartNumber)) {\n          this.parts.push({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag,\n          })\n        }\n      })\n      this.#uploadParts()\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  #uploadParts () {\n    if (this.isPaused) return\n\n    // All parts are uploaded.\n    if (this.chunkState.every((state) => state.done)) {\n      this.#completeUpload()\n      return\n    }\n\n    // For a 100MB file, with the default min chunk size of 5MB and a limit of 10:\n    //\n    // Total 20 parts\n    // ---------\n    // Need 1 is 10\n    // Need 2 is 5\n    // Need 3 is 5\n    const need = this.options.limit - this.partsInProgress\n    const completeChunks = this.chunkState.filter((state) => state.done).length\n    const remainingChunks = this.chunks.length - completeChunks\n    let minNeeded = Math.ceil(this.options.limit / 2)\n    if (minNeeded > remainingChunks) {\n      minNeeded = remainingChunks\n    }\n    if (need < minNeeded) return\n\n    const candidates = []\n    for (let i = 0; i < this.chunkState.length; i++) {\n      const state = this.chunkState[i]\n      // eslint-disable-next-line no-continue\n      if (state.done || state.busy) continue\n\n      candidates.push(i)\n      if (candidates.length >= need) {\n        break\n      }\n    }\n    if (candidates.length === 0) return\n\n    this.#prepareUploadParts(candidates).then((result) => {\n      candidates.forEach((index) => {\n        const partNumber = index + 1\n        const prePreparedPart = { url: result.presignedUrls[partNumber], headers: result.headers }\n        this.#uploadPartRetryable(index, prePreparedPart).then(() => {\n          this.#uploadParts()\n        }, (err) => {\n          this.#onError(err)\n        })\n      })\n    })\n  }\n\n  #retryable ({ before, attempt, after }) {\n    const { retryDelays } = this.options\n    const { signal } = this.abortController\n\n    if (before) before()\n\n    function shouldRetry (err) {\n      if (err.source && typeof err.source.status === 'number') {\n        const { status } = err.source\n        // 0 probably indicates network failure\n        return status === 0 || status === 409 || status === 423 || (status >= 500 && status < 600)\n      }\n      return false\n    }\n\n    const doAttempt = (retryAttempt) => attempt().catch((err) => {\n      if (this.#aborted()) throw createAbortError()\n\n      if (shouldRetry(err) && retryAttempt < retryDelays.length) {\n        return delay(retryDelays[retryAttempt], { signal })\n          .then(() => doAttempt(retryAttempt + 1))\n      }\n      throw err\n    })\n\n    return doAttempt(0).then((result) => {\n      if (after) after()\n      return result\n    }, (err) => {\n      if (after) after()\n      throw err\n    })\n  }\n\n  async #prepareUploadParts (candidates) {\n    candidates.forEach((i) => {\n      this.chunkState[i].busy = true\n    })\n\n    const result = await this.#retryable({\n      attempt: () => this.options.prepareUploadParts({\n        key: this.key,\n        uploadId: this.uploadId,\n        partNumbers: candidates.map((index) => index + 1),\n        chunks: candidates.reduce((chunks, candidate) => ({\n          ...chunks,\n          // Use the part number as the index\n          [candidate + 1]: this.chunks[candidate],\n        }), {}),\n      }),\n    })\n\n    if (typeof result?.presignedUrls !== 'object') {\n      throw new TypeError(\n        'AwsS3/Multipart: Got incorrect result from `prepareUploadParts()`, expected an object `{ presignedUrls }`.',\n      )\n    }\n\n    return result\n  }\n\n  #uploadPartRetryable (index, prePreparedPart) {\n    return this.#retryable({\n      before: () => {\n        this.chunkState[index].busy = true\n        this.partsInProgress += 1\n      },\n      attempt: () => this.#uploadPart(index, prePreparedPart),\n      after: () => {\n        this.chunkState[index].busy = false\n        this.partsInProgress -= 1\n      },\n    })\n  }\n\n  #uploadPart (index, prePreparedPart) {\n    const valid = typeof prePreparedPart?.url === 'string'\n    if (!valid) {\n      throw new TypeError('AwsS3/Multipart: Got incorrect result for `prePreparedPart`, expected an object `{ url }`.')\n    }\n\n    const { url, headers } = prePreparedPart\n    if (this.#aborted()) {\n      throw createAbortError()\n    }\n\n    return this.#uploadPartBytes(index, url, headers)\n  }\n\n  #onPartProgress (index, sent) {\n    this.chunkState[index].uploaded = ensureInt(sent)\n\n    const totalUploaded = this.chunkState.reduce((n, c) => n + c.uploaded, 0)\n    this.options.onProgress(totalUploaded, this.file.size)\n  }\n\n  #onPartComplete (index, etag) {\n    this.chunkState[index].etag = etag\n    this.chunkState[index].done = true\n\n    const part = {\n      PartNumber: index + 1,\n      ETag: etag,\n    }\n    this.parts.push(part)\n\n    this.options.onPartComplete(part)\n  }\n\n  #uploadPartBytes (index, url, headers) {\n    const body = this.chunks[index]\n    const { signal } = this.abortController\n\n    let defer\n    const promise = new Promise((resolve, reject) => {\n      defer = { resolve, reject }\n    })\n\n    const xhr = new XMLHttpRequest()\n    xhr.open('PUT', url, true)\n    if (headers) {\n      Object.keys(headers).forEach((key) => {\n        xhr.setRequestHeader(key, headers[key])\n      })\n    }\n    xhr.responseType = 'text'\n\n    function cleanup () {\n      // eslint-disable-next-line no-use-before-define\n      signal.removeEventListener('abort', onabort)\n    }\n    function onabort () {\n      xhr.abort()\n    }\n    signal.addEventListener('abort', onabort)\n\n    xhr.upload.addEventListener('progress', (ev) => {\n      if (!ev.lengthComputable) return\n\n      this.#onPartProgress(index, ev.loaded, ev.total)\n    })\n\n    xhr.addEventListener('abort', () => {\n      cleanup()\n\n      defer.reject(createAbortError())\n    })\n\n    xhr.addEventListener('load', (ev) => {\n      cleanup()\n\n      if (ev.target.status < 200 || ev.target.status >= 300) {\n        const error = new Error('Non 2xx')\n        error.source = ev.target\n        defer.reject(error)\n        return\n      }\n\n      // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.\n      this.chunks[index] = null\n\n      this.#onPartProgress(index, body.size, body.size)\n\n      // NOTE This must be allowed by CORS.\n      const etag = ev.target.getResponseHeader('ETag')\n\n      if (etag === null) {\n        defer.reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'))\n        return\n      }\n\n      this.#onPartComplete(index, etag)\n      defer.resolve()\n    })\n\n    xhr.addEventListener('error', (ev) => {\n      cleanup()\n\n      const error = new Error('Unknown error')\n      error.source = ev.target\n      defer.reject(error)\n    })\n\n    xhr.send(body)\n\n    return promise\n  }\n\n  async #completeUpload () {\n    // Parts may not have completed uploading in sorted order, if limit > 1.\n    this.parts.sort((a, b) => a.PartNumber - b.PartNumber)\n\n    try {\n      const result = await this.options.completeMultipartUpload({\n        key: this.key,\n        uploadId: this.uploadId,\n        parts: this.parts,\n      })\n      this.options.onSuccess(result)\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  #abortUpload () {\n    this.abortController.abort()\n\n    this.createdPromise.then(() => this.options.abortMultipartUpload({\n      key: this.key,\n      uploadId: this.uploadId,\n    })).catch(() => {\n      // if the creation failed we do not need to abort\n    })\n  }\n\n  #onError (err) {\n    if (err && err.name === 'AbortError') {\n      return\n    }\n\n    this.options.onError(err)\n  }\n\n  start () {\n    this.isPaused = false\n    if (this.uploadId) {\n      this.#resumeUpload()\n    } else {\n      this.#createUpload()\n    }\n  }\n\n  pause () {\n    this.abortController.abort()\n    // Swap it out for a new controller, because this instance may be resumed later.\n    this.abortController = new AbortController()\n\n    this.isPaused = true\n  }\n\n  abort (opts = undefined) {\n    if (opts?.really) this.#abortUpload()\n    else this.pause()\n  }\n}\n\nexport default MultipartUploader\n"]}