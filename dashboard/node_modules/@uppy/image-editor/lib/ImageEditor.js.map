{"version":3,"sources":["ImageEditor.jsx"],"names":["Editor","packageJson","locale","ImageEditor","UIPlugin","constructor","uppy","opts","save","saveBlobCallback","blob","currentImage","getPluginState","setFileState","id","data","size","preview","updatedFile","getFile","emit","setPluginState","cropper","getCroppedCanvas","cropperOptions","croppedCanvasOptions","toBlob","type","quality","storeCropperInstance","selectFile","file","title","defaultLocale","defaultCropperOptions","viewMode","background","autoCropArea","responsive","defaultActions","revert","rotate","granularRotate","flip","zoomIn","zoomOut","cropSquare","cropWidescreen","cropWidescreenVertical","defaultOptions","actions","i18nInit","canEditFile","isRemote","fileTypeSpecific","split","test","install","target","mount","uninstall","unmount","render","i18n","VERSION","version"],"mappings":"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","sourcesContent":["import { UIPlugin } from '@uppy/core'\nimport { h } from 'preact'\n\nimport Editor from './Editor.jsx'\nimport packageJson from '../package.json'\nimport locale from './locale.js'\n\nexport default class ImageEditor extends UIPlugin {\n  static VERSION = packageJson.version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'ImageEditor'\n    this.title = 'Image Editor'\n    this.type = 'editor'\n\n    this.defaultLocale = locale\n\n    const defaultCropperOptions = {\n      viewMode: 1,\n      background: false,\n      autoCropArea: 1,\n      responsive: true,\n      croppedCanvasOptions: {},\n    }\n\n    const defaultActions = {\n      revert: true,\n      rotate: true,\n      granularRotate: true,\n      flip: true,\n      zoomIn: true,\n      zoomOut: true,\n      cropSquare: true,\n      cropWidescreen: true,\n      cropWidescreenVertical: true,\n    }\n\n    const defaultOptions = {\n      quality: 0.8,\n    }\n\n    this.opts = {\n      ...defaultOptions,\n      ...opts,\n      actions: {\n        ...defaultActions,\n        ...opts.actions,\n      },\n      cropperOptions: {\n        ...defaultCropperOptions,\n        ...opts.cropperOptions,\n      },\n    }\n\n    this.i18nInit()\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  canEditFile (file) {\n    if (!file.type || file.isRemote) {\n      return false\n    }\n\n    const fileTypeSpecific = file.type.split('/')[1]\n\n    if (/^(jpe?g|gif|png|bmp|webp)$/.test(fileTypeSpecific)) {\n      return true\n    }\n\n    return false\n  }\n\n  save = () => {\n    const saveBlobCallback = (blob) => {\n      const { currentImage } = this.getPluginState()\n\n      this.uppy.setFileState(currentImage.id, {\n        data: blob,\n        size: blob.size,\n        preview: null,\n      })\n\n      const updatedFile = this.uppy.getFile(currentImage.id)\n      this.uppy.emit('thumbnail:request', updatedFile)\n      this.setPluginState({\n        currentImage: updatedFile,\n      })\n      this.uppy.emit('file-editor:complete', updatedFile)\n    }\n\n    const { currentImage } = this.getPluginState()\n\n    this.cropper.getCroppedCanvas(this.opts.cropperOptions.croppedCanvasOptions).toBlob(\n      saveBlobCallback,\n      currentImage.type,\n      this.opts.quality,\n    )\n  }\n\n  storeCropperInstance = (cropper) => {\n    this.cropper = cropper\n  }\n\n  selectFile = (file) => {\n    this.uppy.emit('file-editor:start', file)\n    this.setPluginState({\n      currentImage: file,\n    })\n  }\n\n  install () {\n    this.setPluginState({\n      currentImage: null,\n    })\n\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    const { currentImage } = this.getPluginState()\n\n    if (currentImage) {\n      const file = this.uppy.getFile(currentImage.id)\n      this.uppy.emit('file-editor:cancel', file)\n    }\n    this.unmount()\n  }\n\n  render () {\n    const { currentImage } = this.getPluginState()\n\n    if (currentImage === null || currentImage.isRemote) {\n      return null\n    }\n\n    return (\n      <Editor\n        currentImage={currentImage}\n        storeCropperInstance={this.storeCropperInstance}\n        save={this.save}\n        opts={this.opts}\n        i18n={this.i18n}\n      />\n    )\n  }\n}\n"]}