{"version":3,"sources":["PickerPanelTopBar.jsx"],"names":["uploadStates","STATE_ERROR","STATE_WAITING","STATE_PREPROCESSING","STATE_UPLOADING","STATE_POSTPROCESSING","STATE_COMPLETE","STATE_PAUSED","getUploadingState","isAllErrored","isAllComplete","isAllPaused","files","state","fileIDs","Object","keys","i","length","progress","uploadStarted","uploadComplete","preprocess","postprocess","UploadStatus","i18n","inProgressNotPausedFiles","newFiles","processingFiles","uploadingState","smart_count","PanelTopBar","props","hideCancelButton","maxNumberOfFiles","toggleAddFilesPanel","uppy","allowNewUpload","totalFileCount","cancelAll"],"mappings":"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","sourcesContent":["import { h } from 'preact'\n\nconst uploadStates = {\n  STATE_ERROR: 'error',\n  STATE_WAITING: 'waiting',\n  STATE_PREPROCESSING: 'preprocessing',\n  STATE_UPLOADING: 'uploading',\n  STATE_POSTPROCESSING: 'postprocessing',\n  STATE_COMPLETE: 'complete',\n  STATE_PAUSED: 'paused',\n}\n\nfunction getUploadingState (isAllErrored, isAllComplete, isAllPaused, files = {}) {\n  if (isAllErrored) {\n    return uploadStates.STATE_ERROR\n  }\n\n  if (isAllComplete) {\n    return uploadStates.STATE_COMPLETE\n  }\n\n  if (isAllPaused) {\n    return uploadStates.STATE_PAUSED\n  }\n\n  let state = uploadStates.STATE_WAITING\n  const fileIDs = Object.keys(files)\n  for (let i = 0; i < fileIDs.length; i++) {\n    const { progress } = files[fileIDs[i]]\n    // If ANY files are being uploaded right now, show the uploading state.\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return uploadStates.STATE_UPLOADING\n    }\n    // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n    if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {\n      state = uploadStates.STATE_PREPROCESSING\n    }\n    // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n    if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {\n      state = uploadStates.STATE_POSTPROCESSING\n    }\n  }\n  return state\n}\n\nfunction UploadStatus ({\n  files, i18n, isAllComplete, isAllErrored, isAllPaused,\n  inProgressNotPausedFiles, newFiles, processingFiles,\n}) {\n  const uploadingState = getUploadingState(\n    isAllErrored,\n    isAllComplete,\n    isAllPaused,\n    files,\n  )\n\n  switch (uploadingState) {\n    case 'uploading':\n      return i18n('uploadingXFiles', { smart_count: inProgressNotPausedFiles.length })\n    case 'preprocessing':\n    case 'postprocessing':\n      return i18n('processingXFiles', { smart_count: processingFiles.length })\n    case 'paused':\n      return i18n('uploadPaused')\n    case 'waiting':\n      return i18n('xFilesSelected', { smart_count: newFiles.length })\n    case 'complete':\n      return i18n('uploadComplete')\n    default:\n  }\n}\n\nfunction PanelTopBar (props) {\n  const { i18n, isAllComplete, hideCancelButton, maxNumberOfFiles, toggleAddFilesPanel, uppy } = props\n  let { allowNewUpload } = props\n  // TODO maybe this should be done in ../Dashboard.jsx, then just pass that down as `allowNewUpload`\n  if (allowNewUpload && maxNumberOfFiles) {\n    // eslint-disable-next-line react/destructuring-assignment\n    allowNewUpload = props.totalFileCount < props.maxNumberOfFiles\n  }\n\n  return (\n    <div className=\"uppy-DashboardContent-bar\">\n      {!isAllComplete && !hideCancelButton ? (\n        <button\n          className=\"uppy-DashboardContent-back\"\n          type=\"button\"\n          onClick={() => uppy.cancelAll()}\n        >\n          {i18n('cancel')}\n        </button>\n      ) : (\n        <div />\n      )}\n\n      <div className=\"uppy-DashboardContent-title\" role=\"heading\" aria-level=\"1\">\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <UploadStatus {...props} />\n      </div>\n\n      {allowNewUpload ? (\n        <button\n          className=\"uppy-DashboardContent-addMore\"\n          type=\"button\"\n          aria-label={i18n('addMoreFiles')}\n          title={i18n('addMoreFiles')}\n          onClick={() => toggleAddFilesPanel(true)}\n        >\n          <svg aria-hidden=\"true\" focusable=\"false\" className=\"uppy-c-icon\" width=\"15\" height=\"15\" viewBox=\"0 0 15 15\">\n            <path d=\"M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z\" />\n          </svg>\n          <span className=\"uppy-DashboardContent-addMoreCaption\">{i18n('addMore')}</span>\n        </button>\n      ) : (\n        <div />\n      )}\n    </div>\n  )\n}\n\nexport default PanelTopBar\n"]}