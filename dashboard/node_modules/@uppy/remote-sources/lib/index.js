"use strict";

var _core = require("@uppy/core");

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const Dashboard = require("@uppy/dashboard");

const Dropbox = require("@uppy/dropbox");

const GoogleDrive = require("@uppy/google-drive");

const Instagram = require("@uppy/instagram");

const Facebook = require("@uppy/facebook");

const OneDrive = require("@uppy/onedrive");

const Box = require("@uppy/box");

const Unsplash = require("@uppy/unsplash");

const Url = require("@uppy/url");

const Zoom = require("@uppy/zoom");

const packageJson = {
  "version": "0.1.2"
};
const availablePlugins = [Box, Dropbox, Facebook, GoogleDrive, Instagram, OneDrive, Unsplash, Url, Zoom];

var _installedPlugins = /*#__PURE__*/_classPrivateFieldLooseKey("installedPlugins");

class RemoteSources extends _core.BasePlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    Object.defineProperty(this, _installedPlugins, {
      writable: true,
      value: new Set()
    });
    this.id = this.opts.id || 'RemoteSources';
    this.type = 'acquirer';
    const defaultOptions = {
      sources: ['Box', 'Dropbox', 'Facebook', 'GoogleDrive', 'Instagram', 'OneDrive', 'Unsplash', 'Url'],
      target: Dashboard
    };
    this.opts = { ...defaultOptions,
      ...opts
    };

    if (this.opts.companionUrl == null) {
      throw new Error('Please specify companionUrl for RemoteSources to work, see https://uppy.io/docs/remote-sources#companionUrl');
    }
  }

  setOptions(newOpts) {
    this.uninstall();
    super.setOptions(newOpts);
    this.install();
  }

  install() {
    this.opts.sources.forEach(pluginId => {
      const optsForRemoteSourcePlugin = { ...this.opts,
        sources: undefined
      };
      const plugin = availablePlugins.find(p => p.name === pluginId);

      if (plugin == null) {
        const pluginNames = availablePlugins.map(p => p.name);
        const formatter = new Intl.ListFormat('en', {
          style: 'long',
          type: 'disjunction'
        });
        throw new Error(`Invalid plugin: "${pluginId}" is not one of: ${formatter.format(pluginNames)}.`);
      }

      this.uppy.use(plugin, optsForRemoteSourcePlugin); // `plugin` is a class, but we want to track the instance object
      // so we have to do `getPlugin` here.

      _classPrivateFieldLooseBase(this, _installedPlugins)[_installedPlugins].add(this.uppy.getPlugin(pluginId));
    });
  }

  uninstall() {
    for (const plugin of _classPrivateFieldLooseBase(this, _installedPlugins)[_installedPlugins]) {
      this.uppy.removePlugin(plugin);
    }

    _classPrivateFieldLooseBase(this, _installedPlugins)[_installedPlugins].clear();
  }

}

RemoteSources.VERSION = packageJson.version;
module.exports = RemoteSources;