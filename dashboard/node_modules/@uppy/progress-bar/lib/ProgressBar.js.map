{"version":3,"sources":["ProgressBar.jsx"],"names":["packageJson","ProgressBar","UIPlugin","constructor","uppy","opts","id","title","type","defaultOptions","target","fixed","hideAfterFinish","render","bind","state","progress","totalProgress","isHidden","position","width","install","mount","uninstall","unmount","VERSION","version"],"mappings":";;AAAA;;AACA;;MAEOA,W;;;AAEP;AACA;AACA;AACA;;AACe,MAAMC,WAAN,SAA0BC,cAA1B,CAAmC;AAGhDC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAc;AACvB,UAAMD,IAAN,EAAYC,IAAZ;AACA,SAAKC,EAAL,GAAU,KAAKD,IAAL,CAAUC,EAAV,IAAgB,aAA1B;AACA,SAAKC,KAAL,GAAa,cAAb;AACA,SAAKC,IAAL,GAAY,mBAAZ,CAJuB,CAMvB;;AACA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,KAAK,EAAE,KAFc;AAGrBC,MAAAA,eAAe,EAAE;AAHI,KAAvB,CAPuB,CAavB;;AACA,SAAKP,IAAL,GAAY,EAAE,GAAGI,cAAL;AAAqB,SAAGJ;AAAxB,KAAZ;AAEA,SAAKQ,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACD;;AAEDD,EAAAA,MAAM,CAAEE,KAAF,EAAS;AACb,UAAMC,QAAQ,GAAGD,KAAK,CAACE,aAAN,IAAuB,CAAxC,CADa,CAEb;;AACA,UAAMC,QAAQ,GAAG,CAACF,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,GAAhC,KAAwC,KAAKX,IAAL,CAAUO,eAAnE;AACA,WACE;AACE,MAAA,SAAS,EAAC,uBADZ;AAEE,MAAA,KAAK,EAAE;AAAEO,QAAAA,QAAQ,EAAE,KAAKd,IAAL,CAAUM,KAAV,GAAkB,OAAlB,GAA4B;AAAxC,OAFT;AAGE,qBAAaO;AAHf,OAKE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAG,GAAEJ,QAAS;AAArB;AAA/C,MALF,EAME;AAAK,MAAA,SAAS,EAAC;AAAf,OAA8CA,QAA9C,CANF,CADF;AAUD;;AAEDK,EAAAA,OAAO,GAAI;AACT,UAAM;AAAEX,MAAAA;AAAF,QAAa,KAAKL,IAAxB;;AACA,QAAIK,MAAJ,EAAY;AACV,WAAKY,KAAL,CAAWZ,MAAX,EAAmB,IAAnB;AACD;AACF;;AAEDa,EAAAA,SAAS,GAAI;AACX,SAAKC,OAAL;AACD;;AA/C+C;;AAA7BvB,W,CACZwB,O,GAAUzB,WAAW,CAAC0B,O;iBADVzB,W","sourcesContent":["import { h } from 'preact'\nimport { UIPlugin } from '@uppy/core'\n\nimport packageJson from '../package.json'\n\n/**\n * Progress bar\n *\n */\nexport default class ProgressBar extends UIPlugin {\n  static VERSION = packageJson.version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'ProgressBar'\n    this.title = 'Progress Bar'\n    this.type = 'progressindicator'\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      fixed: false,\n      hideAfterFinish: true,\n    }\n\n    // merge default options with the ones set by user\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.render = this.render.bind(this)\n  }\n\n  render (state) {\n    const progress = state.totalProgress || 0\n    // before starting and after finish should be hidden if specified in the options\n    const isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish\n    return (\n      <div\n        className=\"uppy uppy-ProgressBar\"\n        style={{ position: this.opts.fixed ? 'fixed' : 'initial' }}\n        aria-hidden={isHidden}\n      >\n        <div className=\"uppy-ProgressBar-inner\" style={{ width: `${progress}%` }} />\n        <div className=\"uppy-ProgressBar-percentage\">{progress}</div>\n      </div>\n    )\n  }\n\n  install () {\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}